// Generated by opcode_gen -i /home/tom/.go/src/cmd/internal/obj/x86/a.out.go -o opcode.go -p asm
// Do not edit.

package asm

func (a *Asm) Aad(ops ...Operand)             { a.op("AAD", ops...) }
func (a *Asm) AAD(ops ...Operand)             { a.op("AAD", ops...) }
func (a *Asm) Aam(ops ...Operand)             { a.op("AAM", ops...) }
func (a *Asm) AAM(ops ...Operand)             { a.op("AAM", ops...) }
func (a *Asm) Aas(ops ...Operand)             { a.op("AAS", ops...) }
func (a *Asm) AAS(ops ...Operand)             { a.op("AAS", ops...) }
func (a *Asm) Adcb(ops ...Operand)            { a.op("ADCB", ops...) }
func (a *Asm) ADCB(ops ...Operand)            { a.op("ADCB", ops...) }
func (a *Asm) Adcl(ops ...Operand)            { a.op("ADCL", ops...) }
func (a *Asm) ADCL(ops ...Operand)            { a.op("ADCL", ops...) }
func (a *Asm) Adcw(ops ...Operand)            { a.op("ADCW", ops...) }
func (a *Asm) ADCW(ops ...Operand)            { a.op("ADCW", ops...) }
func (a *Asm) Addb(ops ...Operand)            { a.op("ADDB", ops...) }
func (a *Asm) ADDB(ops ...Operand)            { a.op("ADDB", ops...) }
func (a *Asm) Addl(ops ...Operand)            { a.op("ADDL", ops...) }
func (a *Asm) ADDL(ops ...Operand)            { a.op("ADDL", ops...) }
func (a *Asm) Addw(ops ...Operand)            { a.op("ADDW", ops...) }
func (a *Asm) ADDW(ops ...Operand)            { a.op("ADDW", ops...) }
func (a *Asm) Adjsp(ops ...Operand)           { a.op("ADJSP", ops...) }
func (a *Asm) ADJSP(ops ...Operand)           { a.op("ADJSP", ops...) }
func (a *Asm) Andb(ops ...Operand)            { a.op("ANDB", ops...) }
func (a *Asm) ANDB(ops ...Operand)            { a.op("ANDB", ops...) }
func (a *Asm) Andl(ops ...Operand)            { a.op("ANDL", ops...) }
func (a *Asm) ANDL(ops ...Operand)            { a.op("ANDL", ops...) }
func (a *Asm) Andw(ops ...Operand)            { a.op("ANDW", ops...) }
func (a *Asm) ANDW(ops ...Operand)            { a.op("ANDW", ops...) }
func (a *Asm) Arpl(ops ...Operand)            { a.op("ARPL", ops...) }
func (a *Asm) ARPL(ops ...Operand)            { a.op("ARPL", ops...) }
func (a *Asm) Boundl(ops ...Operand)          { a.op("BOUNDL", ops...) }
func (a *Asm) BOUNDL(ops ...Operand)          { a.op("BOUNDL", ops...) }
func (a *Asm) Boundw(ops ...Operand)          { a.op("BOUNDW", ops...) }
func (a *Asm) BOUNDW(ops ...Operand)          { a.op("BOUNDW", ops...) }
func (a *Asm) Bsfl(ops ...Operand)            { a.op("BSFL", ops...) }
func (a *Asm) BSFL(ops ...Operand)            { a.op("BSFL", ops...) }
func (a *Asm) Bsfw(ops ...Operand)            { a.op("BSFW", ops...) }
func (a *Asm) BSFW(ops ...Operand)            { a.op("BSFW", ops...) }
func (a *Asm) Bsrl(ops ...Operand)            { a.op("BSRL", ops...) }
func (a *Asm) BSRL(ops ...Operand)            { a.op("BSRL", ops...) }
func (a *Asm) Bsrw(ops ...Operand)            { a.op("BSRW", ops...) }
func (a *Asm) BSRW(ops ...Operand)            { a.op("BSRW", ops...) }
func (a *Asm) Btl(ops ...Operand)             { a.op("BTL", ops...) }
func (a *Asm) BTL(ops ...Operand)             { a.op("BTL", ops...) }
func (a *Asm) Btw(ops ...Operand)             { a.op("BTW", ops...) }
func (a *Asm) BTW(ops ...Operand)             { a.op("BTW", ops...) }
func (a *Asm) Btcl(ops ...Operand)            { a.op("BTCL", ops...) }
func (a *Asm) BTCL(ops ...Operand)            { a.op("BTCL", ops...) }
func (a *Asm) Btcw(ops ...Operand)            { a.op("BTCW", ops...) }
func (a *Asm) BTCW(ops ...Operand)            { a.op("BTCW", ops...) }
func (a *Asm) Btrl(ops ...Operand)            { a.op("BTRL", ops...) }
func (a *Asm) BTRL(ops ...Operand)            { a.op("BTRL", ops...) }
func (a *Asm) Btrw(ops ...Operand)            { a.op("BTRW", ops...) }
func (a *Asm) BTRW(ops ...Operand)            { a.op("BTRW", ops...) }
func (a *Asm) Btsl(ops ...Operand)            { a.op("BTSL", ops...) }
func (a *Asm) BTSL(ops ...Operand)            { a.op("BTSL", ops...) }
func (a *Asm) Btsw(ops ...Operand)            { a.op("BTSW", ops...) }
func (a *Asm) BTSW(ops ...Operand)            { a.op("BTSW", ops...) }
func (a *Asm) Byte(ops ...Operand)            { a.op("BYTE", ops...) }
func (a *Asm) BYTE(ops ...Operand)            { a.op("BYTE", ops...) }
func (a *Asm) Clc(ops ...Operand)             { a.op("CLC", ops...) }
func (a *Asm) CLC(ops ...Operand)             { a.op("CLC", ops...) }
func (a *Asm) Cld(ops ...Operand)             { a.op("CLD", ops...) }
func (a *Asm) CLD(ops ...Operand)             { a.op("CLD", ops...) }
func (a *Asm) Cli(ops ...Operand)             { a.op("CLI", ops...) }
func (a *Asm) CLI(ops ...Operand)             { a.op("CLI", ops...) }
func (a *Asm) Clts(ops ...Operand)            { a.op("CLTS", ops...) }
func (a *Asm) CLTS(ops ...Operand)            { a.op("CLTS", ops...) }
func (a *Asm) Cmc(ops ...Operand)             { a.op("CMC", ops...) }
func (a *Asm) CMC(ops ...Operand)             { a.op("CMC", ops...) }
func (a *Asm) Cmpb(ops ...Operand)            { a.op("CMPB", ops...) }
func (a *Asm) CMPB(ops ...Operand)            { a.op("CMPB", ops...) }
func (a *Asm) Cmpl(ops ...Operand)            { a.op("CMPL", ops...) }
func (a *Asm) CMPL(ops ...Operand)            { a.op("CMPL", ops...) }
func (a *Asm) Cmpw(ops ...Operand)            { a.op("CMPW", ops...) }
func (a *Asm) CMPW(ops ...Operand)            { a.op("CMPW", ops...) }
func (a *Asm) Cmpsb(ops ...Operand)           { a.op("CMPSB", ops...) }
func (a *Asm) CMPSB(ops ...Operand)           { a.op("CMPSB", ops...) }
func (a *Asm) Cmpsl(ops ...Operand)           { a.op("CMPSL", ops...) }
func (a *Asm) CMPSL(ops ...Operand)           { a.op("CMPSL", ops...) }
func (a *Asm) Cmpsw(ops ...Operand)           { a.op("CMPSW", ops...) }
func (a *Asm) CMPSW(ops ...Operand)           { a.op("CMPSW", ops...) }
func (a *Asm) Daa(ops ...Operand)             { a.op("DAA", ops...) }
func (a *Asm) DAA(ops ...Operand)             { a.op("DAA", ops...) }
func (a *Asm) Das(ops ...Operand)             { a.op("DAS", ops...) }
func (a *Asm) DAS(ops ...Operand)             { a.op("DAS", ops...) }
func (a *Asm) Decb(ops ...Operand)            { a.op("DECB", ops...) }
func (a *Asm) DECB(ops ...Operand)            { a.op("DECB", ops...) }
func (a *Asm) Decl(ops ...Operand)            { a.op("DECL", ops...) }
func (a *Asm) DECL(ops ...Operand)            { a.op("DECL", ops...) }
func (a *Asm) Decq(ops ...Operand)            { a.op("DECQ", ops...) }
func (a *Asm) DECQ(ops ...Operand)            { a.op("DECQ", ops...) }
func (a *Asm) Decw(ops ...Operand)            { a.op("DECW", ops...) }
func (a *Asm) DECW(ops ...Operand)            { a.op("DECW", ops...) }
func (a *Asm) Divb(ops ...Operand)            { a.op("DIVB", ops...) }
func (a *Asm) DIVB(ops ...Operand)            { a.op("DIVB", ops...) }
func (a *Asm) Divl(ops ...Operand)            { a.op("DIVL", ops...) }
func (a *Asm) DIVL(ops ...Operand)            { a.op("DIVL", ops...) }
func (a *Asm) Divw(ops ...Operand)            { a.op("DIVW", ops...) }
func (a *Asm) DIVW(ops ...Operand)            { a.op("DIVW", ops...) }
func (a *Asm) Enter(ops ...Operand)           { a.op("ENTER", ops...) }
func (a *Asm) ENTER(ops ...Operand)           { a.op("ENTER", ops...) }
func (a *Asm) Haddpd(ops ...Operand)          { a.op("HADDPD", ops...) }
func (a *Asm) HADDPD(ops ...Operand)          { a.op("HADDPD", ops...) }
func (a *Asm) Haddps(ops ...Operand)          { a.op("HADDPS", ops...) }
func (a *Asm) HADDPS(ops ...Operand)          { a.op("HADDPS", ops...) }
func (a *Asm) Hlt(ops ...Operand)             { a.op("HLT", ops...) }
func (a *Asm) HLT(ops ...Operand)             { a.op("HLT", ops...) }
func (a *Asm) Hsubpd(ops ...Operand)          { a.op("HSUBPD", ops...) }
func (a *Asm) HSUBPD(ops ...Operand)          { a.op("HSUBPD", ops...) }
func (a *Asm) Hsubps(ops ...Operand)          { a.op("HSUBPS", ops...) }
func (a *Asm) HSUBPS(ops ...Operand)          { a.op("HSUBPS", ops...) }
func (a *Asm) Idivb(ops ...Operand)           { a.op("IDIVB", ops...) }
func (a *Asm) IDIVB(ops ...Operand)           { a.op("IDIVB", ops...) }
func (a *Asm) Idivl(ops ...Operand)           { a.op("IDIVL", ops...) }
func (a *Asm) IDIVL(ops ...Operand)           { a.op("IDIVL", ops...) }
func (a *Asm) Idivw(ops ...Operand)           { a.op("IDIVW", ops...) }
func (a *Asm) IDIVW(ops ...Operand)           { a.op("IDIVW", ops...) }
func (a *Asm) Imulb(ops ...Operand)           { a.op("IMULB", ops...) }
func (a *Asm) IMULB(ops ...Operand)           { a.op("IMULB", ops...) }
func (a *Asm) Imull(ops ...Operand)           { a.op("IMULL", ops...) }
func (a *Asm) IMULL(ops ...Operand)           { a.op("IMULL", ops...) }
func (a *Asm) Imulw(ops ...Operand)           { a.op("IMULW", ops...) }
func (a *Asm) IMULW(ops ...Operand)           { a.op("IMULW", ops...) }
func (a *Asm) Inb(ops ...Operand)             { a.op("INB", ops...) }
func (a *Asm) INB(ops ...Operand)             { a.op("INB", ops...) }
func (a *Asm) Inl(ops ...Operand)             { a.op("INL", ops...) }
func (a *Asm) INL(ops ...Operand)             { a.op("INL", ops...) }
func (a *Asm) Inw(ops ...Operand)             { a.op("INW", ops...) }
func (a *Asm) INW(ops ...Operand)             { a.op("INW", ops...) }
func (a *Asm) Incb(ops ...Operand)            { a.op("INCB", ops...) }
func (a *Asm) INCB(ops ...Operand)            { a.op("INCB", ops...) }
func (a *Asm) Incl(ops ...Operand)            { a.op("INCL", ops...) }
func (a *Asm) INCL(ops ...Operand)            { a.op("INCL", ops...) }
func (a *Asm) Incq(ops ...Operand)            { a.op("INCQ", ops...) }
func (a *Asm) INCQ(ops ...Operand)            { a.op("INCQ", ops...) }
func (a *Asm) Incw(ops ...Operand)            { a.op("INCW", ops...) }
func (a *Asm) INCW(ops ...Operand)            { a.op("INCW", ops...) }
func (a *Asm) Insb(ops ...Operand)            { a.op("INSB", ops...) }
func (a *Asm) INSB(ops ...Operand)            { a.op("INSB", ops...) }
func (a *Asm) Insl(ops ...Operand)            { a.op("INSL", ops...) }
func (a *Asm) INSL(ops ...Operand)            { a.op("INSL", ops...) }
func (a *Asm) Insw(ops ...Operand)            { a.op("INSW", ops...) }
func (a *Asm) INSW(ops ...Operand)            { a.op("INSW", ops...) }
func (a *Asm) Int(ops ...Operand)             { a.op("INT", ops...) }
func (a *Asm) INT(ops ...Operand)             { a.op("INT", ops...) }
func (a *Asm) Into(ops ...Operand)            { a.op("INTO", ops...) }
func (a *Asm) INTO(ops ...Operand)            { a.op("INTO", ops...) }
func (a *Asm) Iretl(ops ...Operand)           { a.op("IRETL", ops...) }
func (a *Asm) IRETL(ops ...Operand)           { a.op("IRETL", ops...) }
func (a *Asm) Iretw(ops ...Operand)           { a.op("IRETW", ops...) }
func (a *Asm) IRETW(ops ...Operand)           { a.op("IRETW", ops...) }
func (a *Asm) Jcc(ops ...Operand)             { a.op("JCC", ops...) }
func (a *Asm) JCC(ops ...Operand)             { a.op("JCC", ops...) }
func (a *Asm) Jcs(ops ...Operand)             { a.op("JCS", ops...) }
func (a *Asm) JCS(ops ...Operand)             { a.op("JCS", ops...) }
func (a *Asm) Jcxzl(ops ...Operand)           { a.op("JCXZL", ops...) }
func (a *Asm) JCXZL(ops ...Operand)           { a.op("JCXZL", ops...) }
func (a *Asm) Jeq(ops ...Operand)             { a.op("JEQ", ops...) }
func (a *Asm) JEQ(ops ...Operand)             { a.op("JEQ", ops...) }
func (a *Asm) Jge(ops ...Operand)             { a.op("JGE", ops...) }
func (a *Asm) JGE(ops ...Operand)             { a.op("JGE", ops...) }
func (a *Asm) Jgt(ops ...Operand)             { a.op("JGT", ops...) }
func (a *Asm) JGT(ops ...Operand)             { a.op("JGT", ops...) }
func (a *Asm) Jhi(ops ...Operand)             { a.op("JHI", ops...) }
func (a *Asm) JHI(ops ...Operand)             { a.op("JHI", ops...) }
func (a *Asm) Jle(ops ...Operand)             { a.op("JLE", ops...) }
func (a *Asm) JLE(ops ...Operand)             { a.op("JLE", ops...) }
func (a *Asm) Jls(ops ...Operand)             { a.op("JLS", ops...) }
func (a *Asm) JLS(ops ...Operand)             { a.op("JLS", ops...) }
func (a *Asm) Jlt(ops ...Operand)             { a.op("JLT", ops...) }
func (a *Asm) JLT(ops ...Operand)             { a.op("JLT", ops...) }
func (a *Asm) Jmi(ops ...Operand)             { a.op("JMI", ops...) }
func (a *Asm) JMI(ops ...Operand)             { a.op("JMI", ops...) }
func (a *Asm) Jne(ops ...Operand)             { a.op("JNE", ops...) }
func (a *Asm) JNE(ops ...Operand)             { a.op("JNE", ops...) }
func (a *Asm) Joc(ops ...Operand)             { a.op("JOC", ops...) }
func (a *Asm) JOC(ops ...Operand)             { a.op("JOC", ops...) }
func (a *Asm) Jos(ops ...Operand)             { a.op("JOS", ops...) }
func (a *Asm) JOS(ops ...Operand)             { a.op("JOS", ops...) }
func (a *Asm) Jpc(ops ...Operand)             { a.op("JPC", ops...) }
func (a *Asm) JPC(ops ...Operand)             { a.op("JPC", ops...) }
func (a *Asm) Jpl(ops ...Operand)             { a.op("JPL", ops...) }
func (a *Asm) JPL(ops ...Operand)             { a.op("JPL", ops...) }
func (a *Asm) Jps(ops ...Operand)             { a.op("JPS", ops...) }
func (a *Asm) JPS(ops ...Operand)             { a.op("JPS", ops...) }
func (a *Asm) Lahf(ops ...Operand)            { a.op("LAHF", ops...) }
func (a *Asm) LAHF(ops ...Operand)            { a.op("LAHF", ops...) }
func (a *Asm) Larl(ops ...Operand)            { a.op("LARL", ops...) }
func (a *Asm) LARL(ops ...Operand)            { a.op("LARL", ops...) }
func (a *Asm) Larw(ops ...Operand)            { a.op("LARW", ops...) }
func (a *Asm) LARW(ops ...Operand)            { a.op("LARW", ops...) }
func (a *Asm) Leal(ops ...Operand)            { a.op("LEAL", ops...) }
func (a *Asm) LEAL(ops ...Operand)            { a.op("LEAL", ops...) }
func (a *Asm) Leaw(ops ...Operand)            { a.op("LEAW", ops...) }
func (a *Asm) LEAW(ops ...Operand)            { a.op("LEAW", ops...) }
func (a *Asm) Leavel(ops ...Operand)          { a.op("LEAVEL", ops...) }
func (a *Asm) LEAVEL(ops ...Operand)          { a.op("LEAVEL", ops...) }
func (a *Asm) Leavew(ops ...Operand)          { a.op("LEAVEW", ops...) }
func (a *Asm) LEAVEW(ops ...Operand)          { a.op("LEAVEW", ops...) }
func (a *Asm) Lock(ops ...Operand)            { a.op("LOCK", ops...) }
func (a *Asm) LOCK(ops ...Operand)            { a.op("LOCK", ops...) }
func (a *Asm) Lodsb(ops ...Operand)           { a.op("LODSB", ops...) }
func (a *Asm) LODSB(ops ...Operand)           { a.op("LODSB", ops...) }
func (a *Asm) Lodsl(ops ...Operand)           { a.op("LODSL", ops...) }
func (a *Asm) LODSL(ops ...Operand)           { a.op("LODSL", ops...) }
func (a *Asm) Lodsw(ops ...Operand)           { a.op("LODSW", ops...) }
func (a *Asm) LODSW(ops ...Operand)           { a.op("LODSW", ops...) }
func (a *Asm) Long(ops ...Operand)            { a.op("LONG", ops...) }
func (a *Asm) LONG(ops ...Operand)            { a.op("LONG", ops...) }
func (a *Asm) Loop(ops ...Operand)            { a.op("LOOP", ops...) }
func (a *Asm) LOOP(ops ...Operand)            { a.op("LOOP", ops...) }
func (a *Asm) Loopeq(ops ...Operand)          { a.op("LOOPEQ", ops...) }
func (a *Asm) LOOPEQ(ops ...Operand)          { a.op("LOOPEQ", ops...) }
func (a *Asm) Loopne(ops ...Operand)          { a.op("LOOPNE", ops...) }
func (a *Asm) LOOPNE(ops ...Operand)          { a.op("LOOPNE", ops...) }
func (a *Asm) Lsll(ops ...Operand)            { a.op("LSLL", ops...) }
func (a *Asm) LSLL(ops ...Operand)            { a.op("LSLL", ops...) }
func (a *Asm) Lslw(ops ...Operand)            { a.op("LSLW", ops...) }
func (a *Asm) LSLW(ops ...Operand)            { a.op("LSLW", ops...) }
func (a *Asm) Movb(ops ...Operand)            { a.op("MOVB", ops...) }
func (a *Asm) MOVB(ops ...Operand)            { a.op("MOVB", ops...) }
func (a *Asm) Movl(ops ...Operand)            { a.op("MOVL", ops...) }
func (a *Asm) MOVL(ops ...Operand)            { a.op("MOVL", ops...) }
func (a *Asm) Movw(ops ...Operand)            { a.op("MOVW", ops...) }
func (a *Asm) MOVW(ops ...Operand)            { a.op("MOVW", ops...) }
func (a *Asm) Movblsx(ops ...Operand)         { a.op("MOVBLSX", ops...) }
func (a *Asm) MOVBLSX(ops ...Operand)         { a.op("MOVBLSX", ops...) }
func (a *Asm) Movblzx(ops ...Operand)         { a.op("MOVBLZX", ops...) }
func (a *Asm) MOVBLZX(ops ...Operand)         { a.op("MOVBLZX", ops...) }
func (a *Asm) Movbqsx(ops ...Operand)         { a.op("MOVBQSX", ops...) }
func (a *Asm) MOVBQSX(ops ...Operand)         { a.op("MOVBQSX", ops...) }
func (a *Asm) Movbqzx(ops ...Operand)         { a.op("MOVBQZX", ops...) }
func (a *Asm) MOVBQZX(ops ...Operand)         { a.op("MOVBQZX", ops...) }
func (a *Asm) Movbwsx(ops ...Operand)         { a.op("MOVBWSX", ops...) }
func (a *Asm) MOVBWSX(ops ...Operand)         { a.op("MOVBWSX", ops...) }
func (a *Asm) Movbwzx(ops ...Operand)         { a.op("MOVBWZX", ops...) }
func (a *Asm) MOVBWZX(ops ...Operand)         { a.op("MOVBWZX", ops...) }
func (a *Asm) Movwlsx(ops ...Operand)         { a.op("MOVWLSX", ops...) }
func (a *Asm) MOVWLSX(ops ...Operand)         { a.op("MOVWLSX", ops...) }
func (a *Asm) Movwlzx(ops ...Operand)         { a.op("MOVWLZX", ops...) }
func (a *Asm) MOVWLZX(ops ...Operand)         { a.op("MOVWLZX", ops...) }
func (a *Asm) Movwqsx(ops ...Operand)         { a.op("MOVWQSX", ops...) }
func (a *Asm) MOVWQSX(ops ...Operand)         { a.op("MOVWQSX", ops...) }
func (a *Asm) Movwqzx(ops ...Operand)         { a.op("MOVWQZX", ops...) }
func (a *Asm) MOVWQZX(ops ...Operand)         { a.op("MOVWQZX", ops...) }
func (a *Asm) Movsb(ops ...Operand)           { a.op("MOVSB", ops...) }
func (a *Asm) MOVSB(ops ...Operand)           { a.op("MOVSB", ops...) }
func (a *Asm) Movsl(ops ...Operand)           { a.op("MOVSL", ops...) }
func (a *Asm) MOVSL(ops ...Operand)           { a.op("MOVSL", ops...) }
func (a *Asm) Movsw(ops ...Operand)           { a.op("MOVSW", ops...) }
func (a *Asm) MOVSW(ops ...Operand)           { a.op("MOVSW", ops...) }
func (a *Asm) Mulb(ops ...Operand)            { a.op("MULB", ops...) }
func (a *Asm) MULB(ops ...Operand)            { a.op("MULB", ops...) }
func (a *Asm) Mull(ops ...Operand)            { a.op("MULL", ops...) }
func (a *Asm) MULL(ops ...Operand)            { a.op("MULL", ops...) }
func (a *Asm) Mulw(ops ...Operand)            { a.op("MULW", ops...) }
func (a *Asm) MULW(ops ...Operand)            { a.op("MULW", ops...) }
func (a *Asm) Negb(ops ...Operand)            { a.op("NEGB", ops...) }
func (a *Asm) NEGB(ops ...Operand)            { a.op("NEGB", ops...) }
func (a *Asm) Negl(ops ...Operand)            { a.op("NEGL", ops...) }
func (a *Asm) NEGL(ops ...Operand)            { a.op("NEGL", ops...) }
func (a *Asm) Negw(ops ...Operand)            { a.op("NEGW", ops...) }
func (a *Asm) NEGW(ops ...Operand)            { a.op("NEGW", ops...) }
func (a *Asm) Notb(ops ...Operand)            { a.op("NOTB", ops...) }
func (a *Asm) NOTB(ops ...Operand)            { a.op("NOTB", ops...) }
func (a *Asm) Notl(ops ...Operand)            { a.op("NOTL", ops...) }
func (a *Asm) NOTL(ops ...Operand)            { a.op("NOTL", ops...) }
func (a *Asm) Notw(ops ...Operand)            { a.op("NOTW", ops...) }
func (a *Asm) NOTW(ops ...Operand)            { a.op("NOTW", ops...) }
func (a *Asm) Orb(ops ...Operand)             { a.op("ORB", ops...) }
func (a *Asm) ORB(ops ...Operand)             { a.op("ORB", ops...) }
func (a *Asm) Orl(ops ...Operand)             { a.op("ORL", ops...) }
func (a *Asm) ORL(ops ...Operand)             { a.op("ORL", ops...) }
func (a *Asm) Orw(ops ...Operand)             { a.op("ORW", ops...) }
func (a *Asm) ORW(ops ...Operand)             { a.op("ORW", ops...) }
func (a *Asm) Outb(ops ...Operand)            { a.op("OUTB", ops...) }
func (a *Asm) OUTB(ops ...Operand)            { a.op("OUTB", ops...) }
func (a *Asm) Outl(ops ...Operand)            { a.op("OUTL", ops...) }
func (a *Asm) OUTL(ops ...Operand)            { a.op("OUTL", ops...) }
func (a *Asm) Outw(ops ...Operand)            { a.op("OUTW", ops...) }
func (a *Asm) OUTW(ops ...Operand)            { a.op("OUTW", ops...) }
func (a *Asm) Outsb(ops ...Operand)           { a.op("OUTSB", ops...) }
func (a *Asm) OUTSB(ops ...Operand)           { a.op("OUTSB", ops...) }
func (a *Asm) Outsl(ops ...Operand)           { a.op("OUTSL", ops...) }
func (a *Asm) OUTSL(ops ...Operand)           { a.op("OUTSL", ops...) }
func (a *Asm) Outsw(ops ...Operand)           { a.op("OUTSW", ops...) }
func (a *Asm) OUTSW(ops ...Operand)           { a.op("OUTSW", ops...) }
func (a *Asm) Pause(ops ...Operand)           { a.op("PAUSE", ops...) }
func (a *Asm) PAUSE(ops ...Operand)           { a.op("PAUSE", ops...) }
func (a *Asm) Popal(ops ...Operand)           { a.op("POPAL", ops...) }
func (a *Asm) POPAL(ops ...Operand)           { a.op("POPAL", ops...) }
func (a *Asm) Popaw(ops ...Operand)           { a.op("POPAW", ops...) }
func (a *Asm) POPAW(ops ...Operand)           { a.op("POPAW", ops...) }
func (a *Asm) Popcntw(ops ...Operand)         { a.op("POPCNTW", ops...) }
func (a *Asm) POPCNTW(ops ...Operand)         { a.op("POPCNTW", ops...) }
func (a *Asm) Popcntl(ops ...Operand)         { a.op("POPCNTL", ops...) }
func (a *Asm) POPCNTL(ops ...Operand)         { a.op("POPCNTL", ops...) }
func (a *Asm) Popcntq(ops ...Operand)         { a.op("POPCNTQ", ops...) }
func (a *Asm) POPCNTQ(ops ...Operand)         { a.op("POPCNTQ", ops...) }
func (a *Asm) Popfl(ops ...Operand)           { a.op("POPFL", ops...) }
func (a *Asm) POPFL(ops ...Operand)           { a.op("POPFL", ops...) }
func (a *Asm) Popfw(ops ...Operand)           { a.op("POPFW", ops...) }
func (a *Asm) POPFW(ops ...Operand)           { a.op("POPFW", ops...) }
func (a *Asm) Popl(ops ...Operand)            { a.op("POPL", ops...) }
func (a *Asm) POPL(ops ...Operand)            { a.op("POPL", ops...) }
func (a *Asm) Popw(ops ...Operand)            { a.op("POPW", ops...) }
func (a *Asm) POPW(ops ...Operand)            { a.op("POPW", ops...) }
func (a *Asm) Pushal(ops ...Operand)          { a.op("PUSHAL", ops...) }
func (a *Asm) PUSHAL(ops ...Operand)          { a.op("PUSHAL", ops...) }
func (a *Asm) Pushaw(ops ...Operand)          { a.op("PUSHAW", ops...) }
func (a *Asm) PUSHAW(ops ...Operand)          { a.op("PUSHAW", ops...) }
func (a *Asm) Pushfl(ops ...Operand)          { a.op("PUSHFL", ops...) }
func (a *Asm) PUSHFL(ops ...Operand)          { a.op("PUSHFL", ops...) }
func (a *Asm) Pushfw(ops ...Operand)          { a.op("PUSHFW", ops...) }
func (a *Asm) PUSHFW(ops ...Operand)          { a.op("PUSHFW", ops...) }
func (a *Asm) Pushl(ops ...Operand)           { a.op("PUSHL", ops...) }
func (a *Asm) PUSHL(ops ...Operand)           { a.op("PUSHL", ops...) }
func (a *Asm) Pushw(ops ...Operand)           { a.op("PUSHW", ops...) }
func (a *Asm) PUSHW(ops ...Operand)           { a.op("PUSHW", ops...) }
func (a *Asm) Rclb(ops ...Operand)            { a.op("RCLB", ops...) }
func (a *Asm) RCLB(ops ...Operand)            { a.op("RCLB", ops...) }
func (a *Asm) Rcll(ops ...Operand)            { a.op("RCLL", ops...) }
func (a *Asm) RCLL(ops ...Operand)            { a.op("RCLL", ops...) }
func (a *Asm) Rclw(ops ...Operand)            { a.op("RCLW", ops...) }
func (a *Asm) RCLW(ops ...Operand)            { a.op("RCLW", ops...) }
func (a *Asm) Rcrb(ops ...Operand)            { a.op("RCRB", ops...) }
func (a *Asm) RCRB(ops ...Operand)            { a.op("RCRB", ops...) }
func (a *Asm) Rcrl(ops ...Operand)            { a.op("RCRL", ops...) }
func (a *Asm) RCRL(ops ...Operand)            { a.op("RCRL", ops...) }
func (a *Asm) Rcrw(ops ...Operand)            { a.op("RCRW", ops...) }
func (a *Asm) RCRW(ops ...Operand)            { a.op("RCRW", ops...) }
func (a *Asm) Rep(ops ...Operand)             { a.op("REP", ops...) }
func (a *Asm) REP(ops ...Operand)             { a.op("REP", ops...) }
func (a *Asm) Repn(ops ...Operand)            { a.op("REPN", ops...) }
func (a *Asm) REPN(ops ...Operand)            { a.op("REPN", ops...) }
func (a *Asm) Rolb(ops ...Operand)            { a.op("ROLB", ops...) }
func (a *Asm) ROLB(ops ...Operand)            { a.op("ROLB", ops...) }
func (a *Asm) Roll(ops ...Operand)            { a.op("ROLL", ops...) }
func (a *Asm) ROLL(ops ...Operand)            { a.op("ROLL", ops...) }
func (a *Asm) Rolw(ops ...Operand)            { a.op("ROLW", ops...) }
func (a *Asm) ROLW(ops ...Operand)            { a.op("ROLW", ops...) }
func (a *Asm) Rorb(ops ...Operand)            { a.op("RORB", ops...) }
func (a *Asm) RORB(ops ...Operand)            { a.op("RORB", ops...) }
func (a *Asm) Rorl(ops ...Operand)            { a.op("RORL", ops...) }
func (a *Asm) RORL(ops ...Operand)            { a.op("RORL", ops...) }
func (a *Asm) Rorw(ops ...Operand)            { a.op("RORW", ops...) }
func (a *Asm) RORW(ops ...Operand)            { a.op("RORW", ops...) }
func (a *Asm) Sahf(ops ...Operand)            { a.op("SAHF", ops...) }
func (a *Asm) SAHF(ops ...Operand)            { a.op("SAHF", ops...) }
func (a *Asm) Salb(ops ...Operand)            { a.op("SALB", ops...) }
func (a *Asm) SALB(ops ...Operand)            { a.op("SALB", ops...) }
func (a *Asm) Sall(ops ...Operand)            { a.op("SALL", ops...) }
func (a *Asm) SALL(ops ...Operand)            { a.op("SALL", ops...) }
func (a *Asm) Salw(ops ...Operand)            { a.op("SALW", ops...) }
func (a *Asm) SALW(ops ...Operand)            { a.op("SALW", ops...) }
func (a *Asm) Sarb(ops ...Operand)            { a.op("SARB", ops...) }
func (a *Asm) SARB(ops ...Operand)            { a.op("SARB", ops...) }
func (a *Asm) Sarl(ops ...Operand)            { a.op("SARL", ops...) }
func (a *Asm) SARL(ops ...Operand)            { a.op("SARL", ops...) }
func (a *Asm) Sarw(ops ...Operand)            { a.op("SARW", ops...) }
func (a *Asm) SARW(ops ...Operand)            { a.op("SARW", ops...) }
func (a *Asm) Sbbb(ops ...Operand)            { a.op("SBBB", ops...) }
func (a *Asm) SBBB(ops ...Operand)            { a.op("SBBB", ops...) }
func (a *Asm) Sbbl(ops ...Operand)            { a.op("SBBL", ops...) }
func (a *Asm) SBBL(ops ...Operand)            { a.op("SBBL", ops...) }
func (a *Asm) Sbbw(ops ...Operand)            { a.op("SBBW", ops...) }
func (a *Asm) SBBW(ops ...Operand)            { a.op("SBBW", ops...) }
func (a *Asm) Scasb(ops ...Operand)           { a.op("SCASB", ops...) }
func (a *Asm) SCASB(ops ...Operand)           { a.op("SCASB", ops...) }
func (a *Asm) Scasl(ops ...Operand)           { a.op("SCASL", ops...) }
func (a *Asm) SCASL(ops ...Operand)           { a.op("SCASL", ops...) }
func (a *Asm) Scasw(ops ...Operand)           { a.op("SCASW", ops...) }
func (a *Asm) SCASW(ops ...Operand)           { a.op("SCASW", ops...) }
func (a *Asm) Setcc(ops ...Operand)           { a.op("SETCC", ops...) }
func (a *Asm) SETCC(ops ...Operand)           { a.op("SETCC", ops...) }
func (a *Asm) Setcs(ops ...Operand)           { a.op("SETCS", ops...) }
func (a *Asm) SETCS(ops ...Operand)           { a.op("SETCS", ops...) }
func (a *Asm) Seteq(ops ...Operand)           { a.op("SETEQ", ops...) }
func (a *Asm) SETEQ(ops ...Operand)           { a.op("SETEQ", ops...) }
func (a *Asm) Setge(ops ...Operand)           { a.op("SETGE", ops...) }
func (a *Asm) SETGE(ops ...Operand)           { a.op("SETGE", ops...) }
func (a *Asm) Setgt(ops ...Operand)           { a.op("SETGT", ops...) }
func (a *Asm) SETGT(ops ...Operand)           { a.op("SETGT", ops...) }
func (a *Asm) Sethi(ops ...Operand)           { a.op("SETHI", ops...) }
func (a *Asm) SETHI(ops ...Operand)           { a.op("SETHI", ops...) }
func (a *Asm) Setle(ops ...Operand)           { a.op("SETLE", ops...) }
func (a *Asm) SETLE(ops ...Operand)           { a.op("SETLE", ops...) }
func (a *Asm) Setls(ops ...Operand)           { a.op("SETLS", ops...) }
func (a *Asm) SETLS(ops ...Operand)           { a.op("SETLS", ops...) }
func (a *Asm) Setlt(ops ...Operand)           { a.op("SETLT", ops...) }
func (a *Asm) SETLT(ops ...Operand)           { a.op("SETLT", ops...) }
func (a *Asm) Setmi(ops ...Operand)           { a.op("SETMI", ops...) }
func (a *Asm) SETMI(ops ...Operand)           { a.op("SETMI", ops...) }
func (a *Asm) Setne(ops ...Operand)           { a.op("SETNE", ops...) }
func (a *Asm) SETNE(ops ...Operand)           { a.op("SETNE", ops...) }
func (a *Asm) Setoc(ops ...Operand)           { a.op("SETOC", ops...) }
func (a *Asm) SETOC(ops ...Operand)           { a.op("SETOC", ops...) }
func (a *Asm) Setos(ops ...Operand)           { a.op("SETOS", ops...) }
func (a *Asm) SETOS(ops ...Operand)           { a.op("SETOS", ops...) }
func (a *Asm) Setpc(ops ...Operand)           { a.op("SETPC", ops...) }
func (a *Asm) SETPC(ops ...Operand)           { a.op("SETPC", ops...) }
func (a *Asm) Setpl(ops ...Operand)           { a.op("SETPL", ops...) }
func (a *Asm) SETPL(ops ...Operand)           { a.op("SETPL", ops...) }
func (a *Asm) Setps(ops ...Operand)           { a.op("SETPS", ops...) }
func (a *Asm) SETPS(ops ...Operand)           { a.op("SETPS", ops...) }
func (a *Asm) Cdq(ops ...Operand)             { a.op("CDQ", ops...) }
func (a *Asm) CDQ(ops ...Operand)             { a.op("CDQ", ops...) }
func (a *Asm) Cwd(ops ...Operand)             { a.op("CWD", ops...) }
func (a *Asm) CWD(ops ...Operand)             { a.op("CWD", ops...) }
func (a *Asm) Shlb(ops ...Operand)            { a.op("SHLB", ops...) }
func (a *Asm) SHLB(ops ...Operand)            { a.op("SHLB", ops...) }
func (a *Asm) Shll(ops ...Operand)            { a.op("SHLL", ops...) }
func (a *Asm) SHLL(ops ...Operand)            { a.op("SHLL", ops...) }
func (a *Asm) Shlw(ops ...Operand)            { a.op("SHLW", ops...) }
func (a *Asm) SHLW(ops ...Operand)            { a.op("SHLW", ops...) }
func (a *Asm) Shrb(ops ...Operand)            { a.op("SHRB", ops...) }
func (a *Asm) SHRB(ops ...Operand)            { a.op("SHRB", ops...) }
func (a *Asm) Shrl(ops ...Operand)            { a.op("SHRL", ops...) }
func (a *Asm) SHRL(ops ...Operand)            { a.op("SHRL", ops...) }
func (a *Asm) Shrw(ops ...Operand)            { a.op("SHRW", ops...) }
func (a *Asm) SHRW(ops ...Operand)            { a.op("SHRW", ops...) }
func (a *Asm) Stc(ops ...Operand)             { a.op("STC", ops...) }
func (a *Asm) STC(ops ...Operand)             { a.op("STC", ops...) }
func (a *Asm) Std(ops ...Operand)             { a.op("STD", ops...) }
func (a *Asm) STD(ops ...Operand)             { a.op("STD", ops...) }
func (a *Asm) Sti(ops ...Operand)             { a.op("STI", ops...) }
func (a *Asm) STI(ops ...Operand)             { a.op("STI", ops...) }
func (a *Asm) Stosb(ops ...Operand)           { a.op("STOSB", ops...) }
func (a *Asm) STOSB(ops ...Operand)           { a.op("STOSB", ops...) }
func (a *Asm) Stosl(ops ...Operand)           { a.op("STOSL", ops...) }
func (a *Asm) STOSL(ops ...Operand)           { a.op("STOSL", ops...) }
func (a *Asm) Stosw(ops ...Operand)           { a.op("STOSW", ops...) }
func (a *Asm) STOSW(ops ...Operand)           { a.op("STOSW", ops...) }
func (a *Asm) Subb(ops ...Operand)            { a.op("SUBB", ops...) }
func (a *Asm) SUBB(ops ...Operand)            { a.op("SUBB", ops...) }
func (a *Asm) Subl(ops ...Operand)            { a.op("SUBL", ops...) }
func (a *Asm) SUBL(ops ...Operand)            { a.op("SUBL", ops...) }
func (a *Asm) Subw(ops ...Operand)            { a.op("SUBW", ops...) }
func (a *Asm) SUBW(ops ...Operand)            { a.op("SUBW", ops...) }
func (a *Asm) Syscall(ops ...Operand)         { a.op("SYSCALL", ops...) }
func (a *Asm) SYSCALL(ops ...Operand)         { a.op("SYSCALL", ops...) }
func (a *Asm) Testb(ops ...Operand)           { a.op("TESTB", ops...) }
func (a *Asm) TESTB(ops ...Operand)           { a.op("TESTB", ops...) }
func (a *Asm) Testl(ops ...Operand)           { a.op("TESTL", ops...) }
func (a *Asm) TESTL(ops ...Operand)           { a.op("TESTL", ops...) }
func (a *Asm) Testw(ops ...Operand)           { a.op("TESTW", ops...) }
func (a *Asm) TESTW(ops ...Operand)           { a.op("TESTW", ops...) }
func (a *Asm) Verr(ops ...Operand)            { a.op("VERR", ops...) }
func (a *Asm) VERR(ops ...Operand)            { a.op("VERR", ops...) }
func (a *Asm) Verw(ops ...Operand)            { a.op("VERW", ops...) }
func (a *Asm) VERW(ops ...Operand)            { a.op("VERW", ops...) }
func (a *Asm) Wait(ops ...Operand)            { a.op("WAIT", ops...) }
func (a *Asm) WAIT(ops ...Operand)            { a.op("WAIT", ops...) }
func (a *Asm) Word(ops ...Operand)            { a.op("WORD", ops...) }
func (a *Asm) WORD(ops ...Operand)            { a.op("WORD", ops...) }
func (a *Asm) Xchgb(ops ...Operand)           { a.op("XCHGB", ops...) }
func (a *Asm) XCHGB(ops ...Operand)           { a.op("XCHGB", ops...) }
func (a *Asm) Xchgl(ops ...Operand)           { a.op("XCHGL", ops...) }
func (a *Asm) XCHGL(ops ...Operand)           { a.op("XCHGL", ops...) }
func (a *Asm) Xchgw(ops ...Operand)           { a.op("XCHGW", ops...) }
func (a *Asm) XCHGW(ops ...Operand)           { a.op("XCHGW", ops...) }
func (a *Asm) Xlat(ops ...Operand)            { a.op("XLAT", ops...) }
func (a *Asm) XLAT(ops ...Operand)            { a.op("XLAT", ops...) }
func (a *Asm) Xorb(ops ...Operand)            { a.op("XORB", ops...) }
func (a *Asm) XORB(ops ...Operand)            { a.op("XORB", ops...) }
func (a *Asm) Xorl(ops ...Operand)            { a.op("XORL", ops...) }
func (a *Asm) XORL(ops ...Operand)            { a.op("XORL", ops...) }
func (a *Asm) Xorw(ops ...Operand)            { a.op("XORW", ops...) }
func (a *Asm) XORW(ops ...Operand)            { a.op("XORW", ops...) }
func (a *Asm) Fmovb(ops ...Operand)           { a.op("FMOVB", ops...) }
func (a *Asm) FMOVB(ops ...Operand)           { a.op("FMOVB", ops...) }
func (a *Asm) Fmovbp(ops ...Operand)          { a.op("FMOVBP", ops...) }
func (a *Asm) FMOVBP(ops ...Operand)          { a.op("FMOVBP", ops...) }
func (a *Asm) Fmovd(ops ...Operand)           { a.op("FMOVD", ops...) }
func (a *Asm) FMOVD(ops ...Operand)           { a.op("FMOVD", ops...) }
func (a *Asm) Fmovdp(ops ...Operand)          { a.op("FMOVDP", ops...) }
func (a *Asm) FMOVDP(ops ...Operand)          { a.op("FMOVDP", ops...) }
func (a *Asm) Fmovf(ops ...Operand)           { a.op("FMOVF", ops...) }
func (a *Asm) FMOVF(ops ...Operand)           { a.op("FMOVF", ops...) }
func (a *Asm) Fmovfp(ops ...Operand)          { a.op("FMOVFP", ops...) }
func (a *Asm) FMOVFP(ops ...Operand)          { a.op("FMOVFP", ops...) }
func (a *Asm) Fmovl(ops ...Operand)           { a.op("FMOVL", ops...) }
func (a *Asm) FMOVL(ops ...Operand)           { a.op("FMOVL", ops...) }
func (a *Asm) Fmovlp(ops ...Operand)          { a.op("FMOVLP", ops...) }
func (a *Asm) FMOVLP(ops ...Operand)          { a.op("FMOVLP", ops...) }
func (a *Asm) Fmovv(ops ...Operand)           { a.op("FMOVV", ops...) }
func (a *Asm) FMOVV(ops ...Operand)           { a.op("FMOVV", ops...) }
func (a *Asm) Fmovvp(ops ...Operand)          { a.op("FMOVVP", ops...) }
func (a *Asm) FMOVVP(ops ...Operand)          { a.op("FMOVVP", ops...) }
func (a *Asm) Fmovw(ops ...Operand)           { a.op("FMOVW", ops...) }
func (a *Asm) FMOVW(ops ...Operand)           { a.op("FMOVW", ops...) }
func (a *Asm) Fmovwp(ops ...Operand)          { a.op("FMOVWP", ops...) }
func (a *Asm) FMOVWP(ops ...Operand)          { a.op("FMOVWP", ops...) }
func (a *Asm) Fmovx(ops ...Operand)           { a.op("FMOVX", ops...) }
func (a *Asm) FMOVX(ops ...Operand)           { a.op("FMOVX", ops...) }
func (a *Asm) Fmovxp(ops ...Operand)          { a.op("FMOVXP", ops...) }
func (a *Asm) FMOVXP(ops ...Operand)          { a.op("FMOVXP", ops...) }
func (a *Asm) Fcomb(ops ...Operand)           { a.op("FCOMB", ops...) }
func (a *Asm) FCOMB(ops ...Operand)           { a.op("FCOMB", ops...) }
func (a *Asm) Fcombp(ops ...Operand)          { a.op("FCOMBP", ops...) }
func (a *Asm) FCOMBP(ops ...Operand)          { a.op("FCOMBP", ops...) }
func (a *Asm) Fcomd(ops ...Operand)           { a.op("FCOMD", ops...) }
func (a *Asm) FCOMD(ops ...Operand)           { a.op("FCOMD", ops...) }
func (a *Asm) Fcomdp(ops ...Operand)          { a.op("FCOMDP", ops...) }
func (a *Asm) FCOMDP(ops ...Operand)          { a.op("FCOMDP", ops...) }
func (a *Asm) Fcomdpp(ops ...Operand)         { a.op("FCOMDPP", ops...) }
func (a *Asm) FCOMDPP(ops ...Operand)         { a.op("FCOMDPP", ops...) }
func (a *Asm) Fcomf(ops ...Operand)           { a.op("FCOMF", ops...) }
func (a *Asm) FCOMF(ops ...Operand)           { a.op("FCOMF", ops...) }
func (a *Asm) Fcomfp(ops ...Operand)          { a.op("FCOMFP", ops...) }
func (a *Asm) FCOMFP(ops ...Operand)          { a.op("FCOMFP", ops...) }
func (a *Asm) Fcoml(ops ...Operand)           { a.op("FCOML", ops...) }
func (a *Asm) FCOML(ops ...Operand)           { a.op("FCOML", ops...) }
func (a *Asm) Fcomlp(ops ...Operand)          { a.op("FCOMLP", ops...) }
func (a *Asm) FCOMLP(ops ...Operand)          { a.op("FCOMLP", ops...) }
func (a *Asm) Fcomw(ops ...Operand)           { a.op("FCOMW", ops...) }
func (a *Asm) FCOMW(ops ...Operand)           { a.op("FCOMW", ops...) }
func (a *Asm) Fcomwp(ops ...Operand)          { a.op("FCOMWP", ops...) }
func (a *Asm) FCOMWP(ops ...Operand)          { a.op("FCOMWP", ops...) }
func (a *Asm) Fucom(ops ...Operand)           { a.op("FUCOM", ops...) }
func (a *Asm) FUCOM(ops ...Operand)           { a.op("FUCOM", ops...) }
func (a *Asm) Fucomp(ops ...Operand)          { a.op("FUCOMP", ops...) }
func (a *Asm) FUCOMP(ops ...Operand)          { a.op("FUCOMP", ops...) }
func (a *Asm) Fucompp(ops ...Operand)         { a.op("FUCOMPP", ops...) }
func (a *Asm) FUCOMPP(ops ...Operand)         { a.op("FUCOMPP", ops...) }
func (a *Asm) Fadddp(ops ...Operand)          { a.op("FADDDP", ops...) }
func (a *Asm) FADDDP(ops ...Operand)          { a.op("FADDDP", ops...) }
func (a *Asm) Faddw(ops ...Operand)           { a.op("FADDW", ops...) }
func (a *Asm) FADDW(ops ...Operand)           { a.op("FADDW", ops...) }
func (a *Asm) Faddl(ops ...Operand)           { a.op("FADDL", ops...) }
func (a *Asm) FADDL(ops ...Operand)           { a.op("FADDL", ops...) }
func (a *Asm) Faddf(ops ...Operand)           { a.op("FADDF", ops...) }
func (a *Asm) FADDF(ops ...Operand)           { a.op("FADDF", ops...) }
func (a *Asm) Faddd(ops ...Operand)           { a.op("FADDD", ops...) }
func (a *Asm) FADDD(ops ...Operand)           { a.op("FADDD", ops...) }
func (a *Asm) Fmuldp(ops ...Operand)          { a.op("FMULDP", ops...) }
func (a *Asm) FMULDP(ops ...Operand)          { a.op("FMULDP", ops...) }
func (a *Asm) Fmulw(ops ...Operand)           { a.op("FMULW", ops...) }
func (a *Asm) FMULW(ops ...Operand)           { a.op("FMULW", ops...) }
func (a *Asm) Fmull(ops ...Operand)           { a.op("FMULL", ops...) }
func (a *Asm) FMULL(ops ...Operand)           { a.op("FMULL", ops...) }
func (a *Asm) Fmulf(ops ...Operand)           { a.op("FMULF", ops...) }
func (a *Asm) FMULF(ops ...Operand)           { a.op("FMULF", ops...) }
func (a *Asm) Fmuld(ops ...Operand)           { a.op("FMULD", ops...) }
func (a *Asm) FMULD(ops ...Operand)           { a.op("FMULD", ops...) }
func (a *Asm) Fsubdp(ops ...Operand)          { a.op("FSUBDP", ops...) }
func (a *Asm) FSUBDP(ops ...Operand)          { a.op("FSUBDP", ops...) }
func (a *Asm) Fsubw(ops ...Operand)           { a.op("FSUBW", ops...) }
func (a *Asm) FSUBW(ops ...Operand)           { a.op("FSUBW", ops...) }
func (a *Asm) Fsubl(ops ...Operand)           { a.op("FSUBL", ops...) }
func (a *Asm) FSUBL(ops ...Operand)           { a.op("FSUBL", ops...) }
func (a *Asm) Fsubf(ops ...Operand)           { a.op("FSUBF", ops...) }
func (a *Asm) FSUBF(ops ...Operand)           { a.op("FSUBF", ops...) }
func (a *Asm) Fsubd(ops ...Operand)           { a.op("FSUBD", ops...) }
func (a *Asm) FSUBD(ops ...Operand)           { a.op("FSUBD", ops...) }
func (a *Asm) Fsubrdp(ops ...Operand)         { a.op("FSUBRDP", ops...) }
func (a *Asm) FSUBRDP(ops ...Operand)         { a.op("FSUBRDP", ops...) }
func (a *Asm) Fsubrw(ops ...Operand)          { a.op("FSUBRW", ops...) }
func (a *Asm) FSUBRW(ops ...Operand)          { a.op("FSUBRW", ops...) }
func (a *Asm) Fsubrl(ops ...Operand)          { a.op("FSUBRL", ops...) }
func (a *Asm) FSUBRL(ops ...Operand)          { a.op("FSUBRL", ops...) }
func (a *Asm) Fsubrf(ops ...Operand)          { a.op("FSUBRF", ops...) }
func (a *Asm) FSUBRF(ops ...Operand)          { a.op("FSUBRF", ops...) }
func (a *Asm) Fsubrd(ops ...Operand)          { a.op("FSUBRD", ops...) }
func (a *Asm) FSUBRD(ops ...Operand)          { a.op("FSUBRD", ops...) }
func (a *Asm) Fdivdp(ops ...Operand)          { a.op("FDIVDP", ops...) }
func (a *Asm) FDIVDP(ops ...Operand)          { a.op("FDIVDP", ops...) }
func (a *Asm) Fdivw(ops ...Operand)           { a.op("FDIVW", ops...) }
func (a *Asm) FDIVW(ops ...Operand)           { a.op("FDIVW", ops...) }
func (a *Asm) Fdivl(ops ...Operand)           { a.op("FDIVL", ops...) }
func (a *Asm) FDIVL(ops ...Operand)           { a.op("FDIVL", ops...) }
func (a *Asm) Fdivf(ops ...Operand)           { a.op("FDIVF", ops...) }
func (a *Asm) FDIVF(ops ...Operand)           { a.op("FDIVF", ops...) }
func (a *Asm) Fdivd(ops ...Operand)           { a.op("FDIVD", ops...) }
func (a *Asm) FDIVD(ops ...Operand)           { a.op("FDIVD", ops...) }
func (a *Asm) Fdivrdp(ops ...Operand)         { a.op("FDIVRDP", ops...) }
func (a *Asm) FDIVRDP(ops ...Operand)         { a.op("FDIVRDP", ops...) }
func (a *Asm) Fdivrw(ops ...Operand)          { a.op("FDIVRW", ops...) }
func (a *Asm) FDIVRW(ops ...Operand)          { a.op("FDIVRW", ops...) }
func (a *Asm) Fdivrl(ops ...Operand)          { a.op("FDIVRL", ops...) }
func (a *Asm) FDIVRL(ops ...Operand)          { a.op("FDIVRL", ops...) }
func (a *Asm) Fdivrf(ops ...Operand)          { a.op("FDIVRF", ops...) }
func (a *Asm) FDIVRF(ops ...Operand)          { a.op("FDIVRF", ops...) }
func (a *Asm) Fdivrd(ops ...Operand)          { a.op("FDIVRD", ops...) }
func (a *Asm) FDIVRD(ops ...Operand)          { a.op("FDIVRD", ops...) }
func (a *Asm) Fxchd(ops ...Operand)           { a.op("FXCHD", ops...) }
func (a *Asm) FXCHD(ops ...Operand)           { a.op("FXCHD", ops...) }
func (a *Asm) Ffree(ops ...Operand)           { a.op("FFREE", ops...) }
func (a *Asm) FFREE(ops ...Operand)           { a.op("FFREE", ops...) }
func (a *Asm) Fldcw(ops ...Operand)           { a.op("FLDCW", ops...) }
func (a *Asm) FLDCW(ops ...Operand)           { a.op("FLDCW", ops...) }
func (a *Asm) Fldenv(ops ...Operand)          { a.op("FLDENV", ops...) }
func (a *Asm) FLDENV(ops ...Operand)          { a.op("FLDENV", ops...) }
func (a *Asm) Frstor(ops ...Operand)          { a.op("FRSTOR", ops...) }
func (a *Asm) FRSTOR(ops ...Operand)          { a.op("FRSTOR", ops...) }
func (a *Asm) Fsave(ops ...Operand)           { a.op("FSAVE", ops...) }
func (a *Asm) FSAVE(ops ...Operand)           { a.op("FSAVE", ops...) }
func (a *Asm) Fstcw(ops ...Operand)           { a.op("FSTCW", ops...) }
func (a *Asm) FSTCW(ops ...Operand)           { a.op("FSTCW", ops...) }
func (a *Asm) Fstenv(ops ...Operand)          { a.op("FSTENV", ops...) }
func (a *Asm) FSTENV(ops ...Operand)          { a.op("FSTENV", ops...) }
func (a *Asm) Fstsw(ops ...Operand)           { a.op("FSTSW", ops...) }
func (a *Asm) FSTSW(ops ...Operand)           { a.op("FSTSW", ops...) }
func (a *Asm) F2xm1(ops ...Operand)           { a.op("F2XM1", ops...) }
func (a *Asm) F2XM1(ops ...Operand)           { a.op("F2XM1", ops...) }
func (a *Asm) Fabs(ops ...Operand)            { a.op("FABS", ops...) }
func (a *Asm) FABS(ops ...Operand)            { a.op("FABS", ops...) }
func (a *Asm) Fchs(ops ...Operand)            { a.op("FCHS", ops...) }
func (a *Asm) FCHS(ops ...Operand)            { a.op("FCHS", ops...) }
func (a *Asm) Fclex(ops ...Operand)           { a.op("FCLEX", ops...) }
func (a *Asm) FCLEX(ops ...Operand)           { a.op("FCLEX", ops...) }
func (a *Asm) Fcos(ops ...Operand)            { a.op("FCOS", ops...) }
func (a *Asm) FCOS(ops ...Operand)            { a.op("FCOS", ops...) }
func (a *Asm) Fdecstp(ops ...Operand)         { a.op("FDECSTP", ops...) }
func (a *Asm) FDECSTP(ops ...Operand)         { a.op("FDECSTP", ops...) }
func (a *Asm) Fincstp(ops ...Operand)         { a.op("FINCSTP", ops...) }
func (a *Asm) FINCSTP(ops ...Operand)         { a.op("FINCSTP", ops...) }
func (a *Asm) Finit(ops ...Operand)           { a.op("FINIT", ops...) }
func (a *Asm) FINIT(ops ...Operand)           { a.op("FINIT", ops...) }
func (a *Asm) Fld1(ops ...Operand)            { a.op("FLD1", ops...) }
func (a *Asm) FLD1(ops ...Operand)            { a.op("FLD1", ops...) }
func (a *Asm) Fldl2e(ops ...Operand)          { a.op("FLDL2E", ops...) }
func (a *Asm) FLDL2E(ops ...Operand)          { a.op("FLDL2E", ops...) }
func (a *Asm) Fldl2t(ops ...Operand)          { a.op("FLDL2T", ops...) }
func (a *Asm) FLDL2T(ops ...Operand)          { a.op("FLDL2T", ops...) }
func (a *Asm) Fldlg2(ops ...Operand)          { a.op("FLDLG2", ops...) }
func (a *Asm) FLDLG2(ops ...Operand)          { a.op("FLDLG2", ops...) }
func (a *Asm) Fldln2(ops ...Operand)          { a.op("FLDLN2", ops...) }
func (a *Asm) FLDLN2(ops ...Operand)          { a.op("FLDLN2", ops...) }
func (a *Asm) Fldpi(ops ...Operand)           { a.op("FLDPI", ops...) }
func (a *Asm) FLDPI(ops ...Operand)           { a.op("FLDPI", ops...) }
func (a *Asm) Fldz(ops ...Operand)            { a.op("FLDZ", ops...) }
func (a *Asm) FLDZ(ops ...Operand)            { a.op("FLDZ", ops...) }
func (a *Asm) Fnop(ops ...Operand)            { a.op("FNOP", ops...) }
func (a *Asm) FNOP(ops ...Operand)            { a.op("FNOP", ops...) }
func (a *Asm) Fpatan(ops ...Operand)          { a.op("FPATAN", ops...) }
func (a *Asm) FPATAN(ops ...Operand)          { a.op("FPATAN", ops...) }
func (a *Asm) Fprem(ops ...Operand)           { a.op("FPREM", ops...) }
func (a *Asm) FPREM(ops ...Operand)           { a.op("FPREM", ops...) }
func (a *Asm) Fprem1(ops ...Operand)          { a.op("FPREM1", ops...) }
func (a *Asm) FPREM1(ops ...Operand)          { a.op("FPREM1", ops...) }
func (a *Asm) Fptan(ops ...Operand)           { a.op("FPTAN", ops...) }
func (a *Asm) FPTAN(ops ...Operand)           { a.op("FPTAN", ops...) }
func (a *Asm) Frndint(ops ...Operand)         { a.op("FRNDINT", ops...) }
func (a *Asm) FRNDINT(ops ...Operand)         { a.op("FRNDINT", ops...) }
func (a *Asm) Fscale(ops ...Operand)          { a.op("FSCALE", ops...) }
func (a *Asm) FSCALE(ops ...Operand)          { a.op("FSCALE", ops...) }
func (a *Asm) Fsin(ops ...Operand)            { a.op("FSIN", ops...) }
func (a *Asm) FSIN(ops ...Operand)            { a.op("FSIN", ops...) }
func (a *Asm) Fsincos(ops ...Operand)         { a.op("FSINCOS", ops...) }
func (a *Asm) FSINCOS(ops ...Operand)         { a.op("FSINCOS", ops...) }
func (a *Asm) Fsqrt(ops ...Operand)           { a.op("FSQRT", ops...) }
func (a *Asm) FSQRT(ops ...Operand)           { a.op("FSQRT", ops...) }
func (a *Asm) Ftst(ops ...Operand)            { a.op("FTST", ops...) }
func (a *Asm) FTST(ops ...Operand)            { a.op("FTST", ops...) }
func (a *Asm) Fxam(ops ...Operand)            { a.op("FXAM", ops...) }
func (a *Asm) FXAM(ops ...Operand)            { a.op("FXAM", ops...) }
func (a *Asm) Fxtract(ops ...Operand)         { a.op("FXTRACT", ops...) }
func (a *Asm) FXTRACT(ops ...Operand)         { a.op("FXTRACT", ops...) }
func (a *Asm) Fyl2x(ops ...Operand)           { a.op("FYL2X", ops...) }
func (a *Asm) FYL2X(ops ...Operand)           { a.op("FYL2X", ops...) }
func (a *Asm) Fyl2xp1(ops ...Operand)         { a.op("FYL2XP1", ops...) }
func (a *Asm) FYL2XP1(ops ...Operand)         { a.op("FYL2XP1", ops...) }
func (a *Asm) Cmpxchgb(ops ...Operand)        { a.op("CMPXCHGB", ops...) }
func (a *Asm) CMPXCHGB(ops ...Operand)        { a.op("CMPXCHGB", ops...) }
func (a *Asm) Cmpxchgl(ops ...Operand)        { a.op("CMPXCHGL", ops...) }
func (a *Asm) CMPXCHGL(ops ...Operand)        { a.op("CMPXCHGL", ops...) }
func (a *Asm) Cmpxchgw(ops ...Operand)        { a.op("CMPXCHGW", ops...) }
func (a *Asm) CMPXCHGW(ops ...Operand)        { a.op("CMPXCHGW", ops...) }
func (a *Asm) Cmpxchg8b(ops ...Operand)       { a.op("CMPXCHG8B", ops...) }
func (a *Asm) CMPXCHG8B(ops ...Operand)       { a.op("CMPXCHG8B", ops...) }
func (a *Asm) Cpuid(ops ...Operand)           { a.op("CPUID", ops...) }
func (a *Asm) CPUID(ops ...Operand)           { a.op("CPUID", ops...) }
func (a *Asm) Invd(ops ...Operand)            { a.op("INVD", ops...) }
func (a *Asm) INVD(ops ...Operand)            { a.op("INVD", ops...) }
func (a *Asm) Invlpg(ops ...Operand)          { a.op("INVLPG", ops...) }
func (a *Asm) INVLPG(ops ...Operand)          { a.op("INVLPG", ops...) }
func (a *Asm) Lfence(ops ...Operand)          { a.op("LFENCE", ops...) }
func (a *Asm) LFENCE(ops ...Operand)          { a.op("LFENCE", ops...) }
func (a *Asm) Mfence(ops ...Operand)          { a.op("MFENCE", ops...) }
func (a *Asm) MFENCE(ops ...Operand)          { a.op("MFENCE", ops...) }
func (a *Asm) Movntil(ops ...Operand)         { a.op("MOVNTIL", ops...) }
func (a *Asm) MOVNTIL(ops ...Operand)         { a.op("MOVNTIL", ops...) }
func (a *Asm) Rdmsr(ops ...Operand)           { a.op("RDMSR", ops...) }
func (a *Asm) RDMSR(ops ...Operand)           { a.op("RDMSR", ops...) }
func (a *Asm) Rdpmc(ops ...Operand)           { a.op("RDPMC", ops...) }
func (a *Asm) RDPMC(ops ...Operand)           { a.op("RDPMC", ops...) }
func (a *Asm) Rdtsc(ops ...Operand)           { a.op("RDTSC", ops...) }
func (a *Asm) RDTSC(ops ...Operand)           { a.op("RDTSC", ops...) }
func (a *Asm) Rsm(ops ...Operand)             { a.op("RSM", ops...) }
func (a *Asm) RSM(ops ...Operand)             { a.op("RSM", ops...) }
func (a *Asm) Sfence(ops ...Operand)          { a.op("SFENCE", ops...) }
func (a *Asm) SFENCE(ops ...Operand)          { a.op("SFENCE", ops...) }
func (a *Asm) Sysret(ops ...Operand)          { a.op("SYSRET", ops...) }
func (a *Asm) SYSRET(ops ...Operand)          { a.op("SYSRET", ops...) }
func (a *Asm) Wbinvd(ops ...Operand)          { a.op("WBINVD", ops...) }
func (a *Asm) WBINVD(ops ...Operand)          { a.op("WBINVD", ops...) }
func (a *Asm) Wrmsr(ops ...Operand)           { a.op("WRMSR", ops...) }
func (a *Asm) WRMSR(ops ...Operand)           { a.op("WRMSR", ops...) }
func (a *Asm) Xaddb(ops ...Operand)           { a.op("XADDB", ops...) }
func (a *Asm) XADDB(ops ...Operand)           { a.op("XADDB", ops...) }
func (a *Asm) Xaddl(ops ...Operand)           { a.op("XADDL", ops...) }
func (a *Asm) XADDL(ops ...Operand)           { a.op("XADDL", ops...) }
func (a *Asm) Xaddw(ops ...Operand)           { a.op("XADDW", ops...) }
func (a *Asm) XADDW(ops ...Operand)           { a.op("XADDW", ops...) }
func (a *Asm) Cmovlcc(ops ...Operand)         { a.op("CMOVLCC", ops...) }
func (a *Asm) CMOVLCC(ops ...Operand)         { a.op("CMOVLCC", ops...) }
func (a *Asm) Cmovlcs(ops ...Operand)         { a.op("CMOVLCS", ops...) }
func (a *Asm) CMOVLCS(ops ...Operand)         { a.op("CMOVLCS", ops...) }
func (a *Asm) Cmovleq(ops ...Operand)         { a.op("CMOVLEQ", ops...) }
func (a *Asm) CMOVLEQ(ops ...Operand)         { a.op("CMOVLEQ", ops...) }
func (a *Asm) Cmovlge(ops ...Operand)         { a.op("CMOVLGE", ops...) }
func (a *Asm) CMOVLGE(ops ...Operand)         { a.op("CMOVLGE", ops...) }
func (a *Asm) Cmovlgt(ops ...Operand)         { a.op("CMOVLGT", ops...) }
func (a *Asm) CMOVLGT(ops ...Operand)         { a.op("CMOVLGT", ops...) }
func (a *Asm) Cmovlhi(ops ...Operand)         { a.op("CMOVLHI", ops...) }
func (a *Asm) CMOVLHI(ops ...Operand)         { a.op("CMOVLHI", ops...) }
func (a *Asm) Cmovlle(ops ...Operand)         { a.op("CMOVLLE", ops...) }
func (a *Asm) CMOVLLE(ops ...Operand)         { a.op("CMOVLLE", ops...) }
func (a *Asm) Cmovlls(ops ...Operand)         { a.op("CMOVLLS", ops...) }
func (a *Asm) CMOVLLS(ops ...Operand)         { a.op("CMOVLLS", ops...) }
func (a *Asm) Cmovllt(ops ...Operand)         { a.op("CMOVLLT", ops...) }
func (a *Asm) CMOVLLT(ops ...Operand)         { a.op("CMOVLLT", ops...) }
func (a *Asm) Cmovlmi(ops ...Operand)         { a.op("CMOVLMI", ops...) }
func (a *Asm) CMOVLMI(ops ...Operand)         { a.op("CMOVLMI", ops...) }
func (a *Asm) Cmovlne(ops ...Operand)         { a.op("CMOVLNE", ops...) }
func (a *Asm) CMOVLNE(ops ...Operand)         { a.op("CMOVLNE", ops...) }
func (a *Asm) Cmovloc(ops ...Operand)         { a.op("CMOVLOC", ops...) }
func (a *Asm) CMOVLOC(ops ...Operand)         { a.op("CMOVLOC", ops...) }
func (a *Asm) Cmovlos(ops ...Operand)         { a.op("CMOVLOS", ops...) }
func (a *Asm) CMOVLOS(ops ...Operand)         { a.op("CMOVLOS", ops...) }
func (a *Asm) Cmovlpc(ops ...Operand)         { a.op("CMOVLPC", ops...) }
func (a *Asm) CMOVLPC(ops ...Operand)         { a.op("CMOVLPC", ops...) }
func (a *Asm) Cmovlpl(ops ...Operand)         { a.op("CMOVLPL", ops...) }
func (a *Asm) CMOVLPL(ops ...Operand)         { a.op("CMOVLPL", ops...) }
func (a *Asm) Cmovlps(ops ...Operand)         { a.op("CMOVLPS", ops...) }
func (a *Asm) CMOVLPS(ops ...Operand)         { a.op("CMOVLPS", ops...) }
func (a *Asm) Cmovqcc(ops ...Operand)         { a.op("CMOVQCC", ops...) }
func (a *Asm) CMOVQCC(ops ...Operand)         { a.op("CMOVQCC", ops...) }
func (a *Asm) Cmovqcs(ops ...Operand)         { a.op("CMOVQCS", ops...) }
func (a *Asm) CMOVQCS(ops ...Operand)         { a.op("CMOVQCS", ops...) }
func (a *Asm) Cmovqeq(ops ...Operand)         { a.op("CMOVQEQ", ops...) }
func (a *Asm) CMOVQEQ(ops ...Operand)         { a.op("CMOVQEQ", ops...) }
func (a *Asm) Cmovqge(ops ...Operand)         { a.op("CMOVQGE", ops...) }
func (a *Asm) CMOVQGE(ops ...Operand)         { a.op("CMOVQGE", ops...) }
func (a *Asm) Cmovqgt(ops ...Operand)         { a.op("CMOVQGT", ops...) }
func (a *Asm) CMOVQGT(ops ...Operand)         { a.op("CMOVQGT", ops...) }
func (a *Asm) Cmovqhi(ops ...Operand)         { a.op("CMOVQHI", ops...) }
func (a *Asm) CMOVQHI(ops ...Operand)         { a.op("CMOVQHI", ops...) }
func (a *Asm) Cmovqle(ops ...Operand)         { a.op("CMOVQLE", ops...) }
func (a *Asm) CMOVQLE(ops ...Operand)         { a.op("CMOVQLE", ops...) }
func (a *Asm) Cmovqls(ops ...Operand)         { a.op("CMOVQLS", ops...) }
func (a *Asm) CMOVQLS(ops ...Operand)         { a.op("CMOVQLS", ops...) }
func (a *Asm) Cmovqlt(ops ...Operand)         { a.op("CMOVQLT", ops...) }
func (a *Asm) CMOVQLT(ops ...Operand)         { a.op("CMOVQLT", ops...) }
func (a *Asm) Cmovqmi(ops ...Operand)         { a.op("CMOVQMI", ops...) }
func (a *Asm) CMOVQMI(ops ...Operand)         { a.op("CMOVQMI", ops...) }
func (a *Asm) Cmovqne(ops ...Operand)         { a.op("CMOVQNE", ops...) }
func (a *Asm) CMOVQNE(ops ...Operand)         { a.op("CMOVQNE", ops...) }
func (a *Asm) Cmovqoc(ops ...Operand)         { a.op("CMOVQOC", ops...) }
func (a *Asm) CMOVQOC(ops ...Operand)         { a.op("CMOVQOC", ops...) }
func (a *Asm) Cmovqos(ops ...Operand)         { a.op("CMOVQOS", ops...) }
func (a *Asm) CMOVQOS(ops ...Operand)         { a.op("CMOVQOS", ops...) }
func (a *Asm) Cmovqpc(ops ...Operand)         { a.op("CMOVQPC", ops...) }
func (a *Asm) CMOVQPC(ops ...Operand)         { a.op("CMOVQPC", ops...) }
func (a *Asm) Cmovqpl(ops ...Operand)         { a.op("CMOVQPL", ops...) }
func (a *Asm) CMOVQPL(ops ...Operand)         { a.op("CMOVQPL", ops...) }
func (a *Asm) Cmovqps(ops ...Operand)         { a.op("CMOVQPS", ops...) }
func (a *Asm) CMOVQPS(ops ...Operand)         { a.op("CMOVQPS", ops...) }
func (a *Asm) Cmovwcc(ops ...Operand)         { a.op("CMOVWCC", ops...) }
func (a *Asm) CMOVWCC(ops ...Operand)         { a.op("CMOVWCC", ops...) }
func (a *Asm) Cmovwcs(ops ...Operand)         { a.op("CMOVWCS", ops...) }
func (a *Asm) CMOVWCS(ops ...Operand)         { a.op("CMOVWCS", ops...) }
func (a *Asm) Cmovweq(ops ...Operand)         { a.op("CMOVWEQ", ops...) }
func (a *Asm) CMOVWEQ(ops ...Operand)         { a.op("CMOVWEQ", ops...) }
func (a *Asm) Cmovwge(ops ...Operand)         { a.op("CMOVWGE", ops...) }
func (a *Asm) CMOVWGE(ops ...Operand)         { a.op("CMOVWGE", ops...) }
func (a *Asm) Cmovwgt(ops ...Operand)         { a.op("CMOVWGT", ops...) }
func (a *Asm) CMOVWGT(ops ...Operand)         { a.op("CMOVWGT", ops...) }
func (a *Asm) Cmovwhi(ops ...Operand)         { a.op("CMOVWHI", ops...) }
func (a *Asm) CMOVWHI(ops ...Operand)         { a.op("CMOVWHI", ops...) }
func (a *Asm) Cmovwle(ops ...Operand)         { a.op("CMOVWLE", ops...) }
func (a *Asm) CMOVWLE(ops ...Operand)         { a.op("CMOVWLE", ops...) }
func (a *Asm) Cmovwls(ops ...Operand)         { a.op("CMOVWLS", ops...) }
func (a *Asm) CMOVWLS(ops ...Operand)         { a.op("CMOVWLS", ops...) }
func (a *Asm) Cmovwlt(ops ...Operand)         { a.op("CMOVWLT", ops...) }
func (a *Asm) CMOVWLT(ops ...Operand)         { a.op("CMOVWLT", ops...) }
func (a *Asm) Cmovwmi(ops ...Operand)         { a.op("CMOVWMI", ops...) }
func (a *Asm) CMOVWMI(ops ...Operand)         { a.op("CMOVWMI", ops...) }
func (a *Asm) Cmovwne(ops ...Operand)         { a.op("CMOVWNE", ops...) }
func (a *Asm) CMOVWNE(ops ...Operand)         { a.op("CMOVWNE", ops...) }
func (a *Asm) Cmovwoc(ops ...Operand)         { a.op("CMOVWOC", ops...) }
func (a *Asm) CMOVWOC(ops ...Operand)         { a.op("CMOVWOC", ops...) }
func (a *Asm) Cmovwos(ops ...Operand)         { a.op("CMOVWOS", ops...) }
func (a *Asm) CMOVWOS(ops ...Operand)         { a.op("CMOVWOS", ops...) }
func (a *Asm) Cmovwpc(ops ...Operand)         { a.op("CMOVWPC", ops...) }
func (a *Asm) CMOVWPC(ops ...Operand)         { a.op("CMOVWPC", ops...) }
func (a *Asm) Cmovwpl(ops ...Operand)         { a.op("CMOVWPL", ops...) }
func (a *Asm) CMOVWPL(ops ...Operand)         { a.op("CMOVWPL", ops...) }
func (a *Asm) Cmovwps(ops ...Operand)         { a.op("CMOVWPS", ops...) }
func (a *Asm) CMOVWPS(ops ...Operand)         { a.op("CMOVWPS", ops...) }
func (a *Asm) Adcq(ops ...Operand)            { a.op("ADCQ", ops...) }
func (a *Asm) ADCQ(ops ...Operand)            { a.op("ADCQ", ops...) }
func (a *Asm) Addq(ops ...Operand)            { a.op("ADDQ", ops...) }
func (a *Asm) ADDQ(ops ...Operand)            { a.op("ADDQ", ops...) }
func (a *Asm) Andq(ops ...Operand)            { a.op("ANDQ", ops...) }
func (a *Asm) ANDQ(ops ...Operand)            { a.op("ANDQ", ops...) }
func (a *Asm) Bsfq(ops ...Operand)            { a.op("BSFQ", ops...) }
func (a *Asm) BSFQ(ops ...Operand)            { a.op("BSFQ", ops...) }
func (a *Asm) Bsrq(ops ...Operand)            { a.op("BSRQ", ops...) }
func (a *Asm) BSRQ(ops ...Operand)            { a.op("BSRQ", ops...) }
func (a *Asm) Btcq(ops ...Operand)            { a.op("BTCQ", ops...) }
func (a *Asm) BTCQ(ops ...Operand)            { a.op("BTCQ", ops...) }
func (a *Asm) Btq(ops ...Operand)             { a.op("BTQ", ops...) }
func (a *Asm) BTQ(ops ...Operand)             { a.op("BTQ", ops...) }
func (a *Asm) Btrq(ops ...Operand)            { a.op("BTRQ", ops...) }
func (a *Asm) BTRQ(ops ...Operand)            { a.op("BTRQ", ops...) }
func (a *Asm) Btsq(ops ...Operand)            { a.op("BTSQ", ops...) }
func (a *Asm) BTSQ(ops ...Operand)            { a.op("BTSQ", ops...) }
func (a *Asm) Cmpq(ops ...Operand)            { a.op("CMPQ", ops...) }
func (a *Asm) CMPQ(ops ...Operand)            { a.op("CMPQ", ops...) }
func (a *Asm) Cmpsq(ops ...Operand)           { a.op("CMPSQ", ops...) }
func (a *Asm) CMPSQ(ops ...Operand)           { a.op("CMPSQ", ops...) }
func (a *Asm) Cmpxchgq(ops ...Operand)        { a.op("CMPXCHGQ", ops...) }
func (a *Asm) CMPXCHGQ(ops ...Operand)        { a.op("CMPXCHGQ", ops...) }
func (a *Asm) Cqo(ops ...Operand)             { a.op("CQO", ops...) }
func (a *Asm) CQO(ops ...Operand)             { a.op("CQO", ops...) }
func (a *Asm) Divq(ops ...Operand)            { a.op("DIVQ", ops...) }
func (a *Asm) DIVQ(ops ...Operand)            { a.op("DIVQ", ops...) }
func (a *Asm) Idivq(ops ...Operand)           { a.op("IDIVQ", ops...) }
func (a *Asm) IDIVQ(ops ...Operand)           { a.op("IDIVQ", ops...) }
func (a *Asm) Imulq(ops ...Operand)           { a.op("IMULQ", ops...) }
func (a *Asm) IMULQ(ops ...Operand)           { a.op("IMULQ", ops...) }
func (a *Asm) Iretq(ops ...Operand)           { a.op("IRETQ", ops...) }
func (a *Asm) IRETQ(ops ...Operand)           { a.op("IRETQ", ops...) }
func (a *Asm) Jcxzq(ops ...Operand)           { a.op("JCXZQ", ops...) }
func (a *Asm) JCXZQ(ops ...Operand)           { a.op("JCXZQ", ops...) }
func (a *Asm) Leaq(ops ...Operand)            { a.op("LEAQ", ops...) }
func (a *Asm) LEAQ(ops ...Operand)            { a.op("LEAQ", ops...) }
func (a *Asm) Leaveq(ops ...Operand)          { a.op("LEAVEQ", ops...) }
func (a *Asm) LEAVEQ(ops ...Operand)          { a.op("LEAVEQ", ops...) }
func (a *Asm) Lodsq(ops ...Operand)           { a.op("LODSQ", ops...) }
func (a *Asm) LODSQ(ops ...Operand)           { a.op("LODSQ", ops...) }
func (a *Asm) Movq(ops ...Operand)            { a.op("MOVQ", ops...) }
func (a *Asm) MOVQ(ops ...Operand)            { a.op("MOVQ", ops...) }
func (a *Asm) Movlqsx(ops ...Operand)         { a.op("MOVLQSX", ops...) }
func (a *Asm) MOVLQSX(ops ...Operand)         { a.op("MOVLQSX", ops...) }
func (a *Asm) Movlqzx(ops ...Operand)         { a.op("MOVLQZX", ops...) }
func (a *Asm) MOVLQZX(ops ...Operand)         { a.op("MOVLQZX", ops...) }
func (a *Asm) Movntiq(ops ...Operand)         { a.op("MOVNTIQ", ops...) }
func (a *Asm) MOVNTIQ(ops ...Operand)         { a.op("MOVNTIQ", ops...) }
func (a *Asm) Movsq(ops ...Operand)           { a.op("MOVSQ", ops...) }
func (a *Asm) MOVSQ(ops ...Operand)           { a.op("MOVSQ", ops...) }
func (a *Asm) Mulq(ops ...Operand)            { a.op("MULQ", ops...) }
func (a *Asm) MULQ(ops ...Operand)            { a.op("MULQ", ops...) }
func (a *Asm) Negq(ops ...Operand)            { a.op("NEGQ", ops...) }
func (a *Asm) NEGQ(ops ...Operand)            { a.op("NEGQ", ops...) }
func (a *Asm) Notq(ops ...Operand)            { a.op("NOTQ", ops...) }
func (a *Asm) NOTQ(ops ...Operand)            { a.op("NOTQ", ops...) }
func (a *Asm) Orq(ops ...Operand)             { a.op("ORQ", ops...) }
func (a *Asm) ORQ(ops ...Operand)             { a.op("ORQ", ops...) }
func (a *Asm) Popfq(ops ...Operand)           { a.op("POPFQ", ops...) }
func (a *Asm) POPFQ(ops ...Operand)           { a.op("POPFQ", ops...) }
func (a *Asm) Popq(ops ...Operand)            { a.op("POPQ", ops...) }
func (a *Asm) POPQ(ops ...Operand)            { a.op("POPQ", ops...) }
func (a *Asm) Pushfq(ops ...Operand)          { a.op("PUSHFQ", ops...) }
func (a *Asm) PUSHFQ(ops ...Operand)          { a.op("PUSHFQ", ops...) }
func (a *Asm) Pushq(ops ...Operand)           { a.op("PUSHQ", ops...) }
func (a *Asm) PUSHQ(ops ...Operand)           { a.op("PUSHQ", ops...) }
func (a *Asm) Rclq(ops ...Operand)            { a.op("RCLQ", ops...) }
func (a *Asm) RCLQ(ops ...Operand)            { a.op("RCLQ", ops...) }
func (a *Asm) Rcrq(ops ...Operand)            { a.op("RCRQ", ops...) }
func (a *Asm) RCRQ(ops ...Operand)            { a.op("RCRQ", ops...) }
func (a *Asm) Rolq(ops ...Operand)            { a.op("ROLQ", ops...) }
func (a *Asm) ROLQ(ops ...Operand)            { a.op("ROLQ", ops...) }
func (a *Asm) Rorq(ops ...Operand)            { a.op("RORQ", ops...) }
func (a *Asm) RORQ(ops ...Operand)            { a.op("RORQ", ops...) }
func (a *Asm) Quad(ops ...Operand)            { a.op("QUAD", ops...) }
func (a *Asm) QUAD(ops ...Operand)            { a.op("QUAD", ops...) }
func (a *Asm) Salq(ops ...Operand)            { a.op("SALQ", ops...) }
func (a *Asm) SALQ(ops ...Operand)            { a.op("SALQ", ops...) }
func (a *Asm) Sarq(ops ...Operand)            { a.op("SARQ", ops...) }
func (a *Asm) SARQ(ops ...Operand)            { a.op("SARQ", ops...) }
func (a *Asm) Sbbq(ops ...Operand)            { a.op("SBBQ", ops...) }
func (a *Asm) SBBQ(ops ...Operand)            { a.op("SBBQ", ops...) }
func (a *Asm) Scasq(ops ...Operand)           { a.op("SCASQ", ops...) }
func (a *Asm) SCASQ(ops ...Operand)           { a.op("SCASQ", ops...) }
func (a *Asm) Shlq(ops ...Operand)            { a.op("SHLQ", ops...) }
func (a *Asm) SHLQ(ops ...Operand)            { a.op("SHLQ", ops...) }
func (a *Asm) Shrq(ops ...Operand)            { a.op("SHRQ", ops...) }
func (a *Asm) SHRQ(ops ...Operand)            { a.op("SHRQ", ops...) }
func (a *Asm) Stosq(ops ...Operand)           { a.op("STOSQ", ops...) }
func (a *Asm) STOSQ(ops ...Operand)           { a.op("STOSQ", ops...) }
func (a *Asm) Subq(ops ...Operand)            { a.op("SUBQ", ops...) }
func (a *Asm) SUBQ(ops ...Operand)            { a.op("SUBQ", ops...) }
func (a *Asm) Testq(ops ...Operand)           { a.op("TESTQ", ops...) }
func (a *Asm) TESTQ(ops ...Operand)           { a.op("TESTQ", ops...) }
func (a *Asm) Xaddq(ops ...Operand)           { a.op("XADDQ", ops...) }
func (a *Asm) XADDQ(ops ...Operand)           { a.op("XADDQ", ops...) }
func (a *Asm) Xchgq(ops ...Operand)           { a.op("XCHGQ", ops...) }
func (a *Asm) XCHGQ(ops ...Operand)           { a.op("XCHGQ", ops...) }
func (a *Asm) Xorq(ops ...Operand)            { a.op("XORQ", ops...) }
func (a *Asm) XORQ(ops ...Operand)            { a.op("XORQ", ops...) }
func (a *Asm) Xgetbv(ops ...Operand)          { a.op("XGETBV", ops...) }
func (a *Asm) XGETBV(ops ...Operand)          { a.op("XGETBV", ops...) }
func (a *Asm) Addpd(ops ...Operand)           { a.op("ADDPD", ops...) }
func (a *Asm) ADDPD(ops ...Operand)           { a.op("ADDPD", ops...) }
func (a *Asm) Addps(ops ...Operand)           { a.op("ADDPS", ops...) }
func (a *Asm) ADDPS(ops ...Operand)           { a.op("ADDPS", ops...) }
func (a *Asm) Addsd(ops ...Operand)           { a.op("ADDSD", ops...) }
func (a *Asm) ADDSD(ops ...Operand)           { a.op("ADDSD", ops...) }
func (a *Asm) Addss(ops ...Operand)           { a.op("ADDSS", ops...) }
func (a *Asm) ADDSS(ops ...Operand)           { a.op("ADDSS", ops...) }
func (a *Asm) Andnl(ops ...Operand)           { a.op("ANDNL", ops...) }
func (a *Asm) ANDNL(ops ...Operand)           { a.op("ANDNL", ops...) }
func (a *Asm) Andnq(ops ...Operand)           { a.op("ANDNQ", ops...) }
func (a *Asm) ANDNQ(ops ...Operand)           { a.op("ANDNQ", ops...) }
func (a *Asm) Andnpd(ops ...Operand)          { a.op("ANDNPD", ops...) }
func (a *Asm) ANDNPD(ops ...Operand)          { a.op("ANDNPD", ops...) }
func (a *Asm) Andnps(ops ...Operand)          { a.op("ANDNPS", ops...) }
func (a *Asm) ANDNPS(ops ...Operand)          { a.op("ANDNPS", ops...) }
func (a *Asm) Andpd(ops ...Operand)           { a.op("ANDPD", ops...) }
func (a *Asm) ANDPD(ops ...Operand)           { a.op("ANDPD", ops...) }
func (a *Asm) Andps(ops ...Operand)           { a.op("ANDPS", ops...) }
func (a *Asm) ANDPS(ops ...Operand)           { a.op("ANDPS", ops...) }
func (a *Asm) Bextrl(ops ...Operand)          { a.op("BEXTRL", ops...) }
func (a *Asm) BEXTRL(ops ...Operand)          { a.op("BEXTRL", ops...) }
func (a *Asm) Bextrq(ops ...Operand)          { a.op("BEXTRQ", ops...) }
func (a *Asm) BEXTRQ(ops ...Operand)          { a.op("BEXTRQ", ops...) }
func (a *Asm) Blsil(ops ...Operand)           { a.op("BLSIL", ops...) }
func (a *Asm) BLSIL(ops ...Operand)           { a.op("BLSIL", ops...) }
func (a *Asm) Blsiq(ops ...Operand)           { a.op("BLSIQ", ops...) }
func (a *Asm) BLSIQ(ops ...Operand)           { a.op("BLSIQ", ops...) }
func (a *Asm) Blsmskl(ops ...Operand)         { a.op("BLSMSKL", ops...) }
func (a *Asm) BLSMSKL(ops ...Operand)         { a.op("BLSMSKL", ops...) }
func (a *Asm) Blsmskq(ops ...Operand)         { a.op("BLSMSKQ", ops...) }
func (a *Asm) BLSMSKQ(ops ...Operand)         { a.op("BLSMSKQ", ops...) }
func (a *Asm) Blsrl(ops ...Operand)           { a.op("BLSRL", ops...) }
func (a *Asm) BLSRL(ops ...Operand)           { a.op("BLSRL", ops...) }
func (a *Asm) Blsrq(ops ...Operand)           { a.op("BLSRQ", ops...) }
func (a *Asm) BLSRQ(ops ...Operand)           { a.op("BLSRQ", ops...) }
func (a *Asm) Bzhil(ops ...Operand)           { a.op("BZHIL", ops...) }
func (a *Asm) BZHIL(ops ...Operand)           { a.op("BZHIL", ops...) }
func (a *Asm) Bzhiq(ops ...Operand)           { a.op("BZHIQ", ops...) }
func (a *Asm) BZHIQ(ops ...Operand)           { a.op("BZHIQ", ops...) }
func (a *Asm) Cmppd(ops ...Operand)           { a.op("CMPPD", ops...) }
func (a *Asm) CMPPD(ops ...Operand)           { a.op("CMPPD", ops...) }
func (a *Asm) Cmpps(ops ...Operand)           { a.op("CMPPS", ops...) }
func (a *Asm) CMPPS(ops ...Operand)           { a.op("CMPPS", ops...) }
func (a *Asm) Cmpsd(ops ...Operand)           { a.op("CMPSD", ops...) }
func (a *Asm) CMPSD(ops ...Operand)           { a.op("CMPSD", ops...) }
func (a *Asm) Cmpss(ops ...Operand)           { a.op("CMPSS", ops...) }
func (a *Asm) CMPSS(ops ...Operand)           { a.op("CMPSS", ops...) }
func (a *Asm) Comisd(ops ...Operand)          { a.op("COMISD", ops...) }
func (a *Asm) COMISD(ops ...Operand)          { a.op("COMISD", ops...) }
func (a *Asm) Comiss(ops ...Operand)          { a.op("COMISS", ops...) }
func (a *Asm) COMISS(ops ...Operand)          { a.op("COMISS", ops...) }
func (a *Asm) Cvtpd2pl(ops ...Operand)        { a.op("CVTPD2PL", ops...) }
func (a *Asm) CVTPD2PL(ops ...Operand)        { a.op("CVTPD2PL", ops...) }
func (a *Asm) Cvtpd2ps(ops ...Operand)        { a.op("CVTPD2PS", ops...) }
func (a *Asm) CVTPD2PS(ops ...Operand)        { a.op("CVTPD2PS", ops...) }
func (a *Asm) Cvtpl2pd(ops ...Operand)        { a.op("CVTPL2PD", ops...) }
func (a *Asm) CVTPL2PD(ops ...Operand)        { a.op("CVTPL2PD", ops...) }
func (a *Asm) Cvtpl2ps(ops ...Operand)        { a.op("CVTPL2PS", ops...) }
func (a *Asm) CVTPL2PS(ops ...Operand)        { a.op("CVTPL2PS", ops...) }
func (a *Asm) Cvtps2pd(ops ...Operand)        { a.op("CVTPS2PD", ops...) }
func (a *Asm) CVTPS2PD(ops ...Operand)        { a.op("CVTPS2PD", ops...) }
func (a *Asm) Cvtps2pl(ops ...Operand)        { a.op("CVTPS2PL", ops...) }
func (a *Asm) CVTPS2PL(ops ...Operand)        { a.op("CVTPS2PL", ops...) }
func (a *Asm) Cvtsd2sl(ops ...Operand)        { a.op("CVTSD2SL", ops...) }
func (a *Asm) CVTSD2SL(ops ...Operand)        { a.op("CVTSD2SL", ops...) }
func (a *Asm) Cvtsd2sq(ops ...Operand)        { a.op("CVTSD2SQ", ops...) }
func (a *Asm) CVTSD2SQ(ops ...Operand)        { a.op("CVTSD2SQ", ops...) }
func (a *Asm) Cvtsd2ss(ops ...Operand)        { a.op("CVTSD2SS", ops...) }
func (a *Asm) CVTSD2SS(ops ...Operand)        { a.op("CVTSD2SS", ops...) }
func (a *Asm) Cvtsl2sd(ops ...Operand)        { a.op("CVTSL2SD", ops...) }
func (a *Asm) CVTSL2SD(ops ...Operand)        { a.op("CVTSL2SD", ops...) }
func (a *Asm) Cvtsl2ss(ops ...Operand)        { a.op("CVTSL2SS", ops...) }
func (a *Asm) CVTSL2SS(ops ...Operand)        { a.op("CVTSL2SS", ops...) }
func (a *Asm) Cvtsq2sd(ops ...Operand)        { a.op("CVTSQ2SD", ops...) }
func (a *Asm) CVTSQ2SD(ops ...Operand)        { a.op("CVTSQ2SD", ops...) }
func (a *Asm) Cvtsq2ss(ops ...Operand)        { a.op("CVTSQ2SS", ops...) }
func (a *Asm) CVTSQ2SS(ops ...Operand)        { a.op("CVTSQ2SS", ops...) }
func (a *Asm) Cvtss2sd(ops ...Operand)        { a.op("CVTSS2SD", ops...) }
func (a *Asm) CVTSS2SD(ops ...Operand)        { a.op("CVTSS2SD", ops...) }
func (a *Asm) Cvtss2sl(ops ...Operand)        { a.op("CVTSS2SL", ops...) }
func (a *Asm) CVTSS2SL(ops ...Operand)        { a.op("CVTSS2SL", ops...) }
func (a *Asm) Cvtss2sq(ops ...Operand)        { a.op("CVTSS2SQ", ops...) }
func (a *Asm) CVTSS2SQ(ops ...Operand)        { a.op("CVTSS2SQ", ops...) }
func (a *Asm) Cvttpd2pl(ops ...Operand)       { a.op("CVTTPD2PL", ops...) }
func (a *Asm) CVTTPD2PL(ops ...Operand)       { a.op("CVTTPD2PL", ops...) }
func (a *Asm) Cvttps2pl(ops ...Operand)       { a.op("CVTTPS2PL", ops...) }
func (a *Asm) CVTTPS2PL(ops ...Operand)       { a.op("CVTTPS2PL", ops...) }
func (a *Asm) Cvttsd2sl(ops ...Operand)       { a.op("CVTTSD2SL", ops...) }
func (a *Asm) CVTTSD2SL(ops ...Operand)       { a.op("CVTTSD2SL", ops...) }
func (a *Asm) Cvttsd2sq(ops ...Operand)       { a.op("CVTTSD2SQ", ops...) }
func (a *Asm) CVTTSD2SQ(ops ...Operand)       { a.op("CVTTSD2SQ", ops...) }
func (a *Asm) Cvttss2sl(ops ...Operand)       { a.op("CVTTSS2SL", ops...) }
func (a *Asm) CVTTSS2SL(ops ...Operand)       { a.op("CVTTSS2SL", ops...) }
func (a *Asm) Cvttss2sq(ops ...Operand)       { a.op("CVTTSS2SQ", ops...) }
func (a *Asm) CVTTSS2SQ(ops ...Operand)       { a.op("CVTTSS2SQ", ops...) }
func (a *Asm) Divpd(ops ...Operand)           { a.op("DIVPD", ops...) }
func (a *Asm) DIVPD(ops ...Operand)           { a.op("DIVPD", ops...) }
func (a *Asm) Divps(ops ...Operand)           { a.op("DIVPS", ops...) }
func (a *Asm) DIVPS(ops ...Operand)           { a.op("DIVPS", ops...) }
func (a *Asm) Divsd(ops ...Operand)           { a.op("DIVSD", ops...) }
func (a *Asm) DIVSD(ops ...Operand)           { a.op("DIVSD", ops...) }
func (a *Asm) Divss(ops ...Operand)           { a.op("DIVSS", ops...) }
func (a *Asm) DIVSS(ops ...Operand)           { a.op("DIVSS", ops...) }
func (a *Asm) Emms(ops ...Operand)            { a.op("EMMS", ops...) }
func (a *Asm) EMMS(ops ...Operand)            { a.op("EMMS", ops...) }
func (a *Asm) Fxrstor(ops ...Operand)         { a.op("FXRSTOR", ops...) }
func (a *Asm) FXRSTOR(ops ...Operand)         { a.op("FXRSTOR", ops...) }
func (a *Asm) Fxrstor64(ops ...Operand)       { a.op("FXRSTOR64", ops...) }
func (a *Asm) FXRSTOR64(ops ...Operand)       { a.op("FXRSTOR64", ops...) }
func (a *Asm) Fxsave(ops ...Operand)          { a.op("FXSAVE", ops...) }
func (a *Asm) FXSAVE(ops ...Operand)          { a.op("FXSAVE", ops...) }
func (a *Asm) Fxsave64(ops ...Operand)        { a.op("FXSAVE64", ops...) }
func (a *Asm) FXSAVE64(ops ...Operand)        { a.op("FXSAVE64", ops...) }
func (a *Asm) Lddqu(ops ...Operand)           { a.op("LDDQU", ops...) }
func (a *Asm) LDDQU(ops ...Operand)           { a.op("LDDQU", ops...) }
func (a *Asm) Ldmxcsr(ops ...Operand)         { a.op("LDMXCSR", ops...) }
func (a *Asm) LDMXCSR(ops ...Operand)         { a.op("LDMXCSR", ops...) }
func (a *Asm) Maskmovou(ops ...Operand)       { a.op("MASKMOVOU", ops...) }
func (a *Asm) MASKMOVOU(ops ...Operand)       { a.op("MASKMOVOU", ops...) }
func (a *Asm) Maskmovq(ops ...Operand)        { a.op("MASKMOVQ", ops...) }
func (a *Asm) MASKMOVQ(ops ...Operand)        { a.op("MASKMOVQ", ops...) }
func (a *Asm) Maxpd(ops ...Operand)           { a.op("MAXPD", ops...) }
func (a *Asm) MAXPD(ops ...Operand)           { a.op("MAXPD", ops...) }
func (a *Asm) Maxps(ops ...Operand)           { a.op("MAXPS", ops...) }
func (a *Asm) MAXPS(ops ...Operand)           { a.op("MAXPS", ops...) }
func (a *Asm) Maxsd(ops ...Operand)           { a.op("MAXSD", ops...) }
func (a *Asm) MAXSD(ops ...Operand)           { a.op("MAXSD", ops...) }
func (a *Asm) Maxss(ops ...Operand)           { a.op("MAXSS", ops...) }
func (a *Asm) MAXSS(ops ...Operand)           { a.op("MAXSS", ops...) }
func (a *Asm) Minpd(ops ...Operand)           { a.op("MINPD", ops...) }
func (a *Asm) MINPD(ops ...Operand)           { a.op("MINPD", ops...) }
func (a *Asm) Minps(ops ...Operand)           { a.op("MINPS", ops...) }
func (a *Asm) MINPS(ops ...Operand)           { a.op("MINPS", ops...) }
func (a *Asm) Minsd(ops ...Operand)           { a.op("MINSD", ops...) }
func (a *Asm) MINSD(ops ...Operand)           { a.op("MINSD", ops...) }
func (a *Asm) Minss(ops ...Operand)           { a.op("MINSS", ops...) }
func (a *Asm) MINSS(ops ...Operand)           { a.op("MINSS", ops...) }
func (a *Asm) Movapd(ops ...Operand)          { a.op("MOVAPD", ops...) }
func (a *Asm) MOVAPD(ops ...Operand)          { a.op("MOVAPD", ops...) }
func (a *Asm) Movaps(ops ...Operand)          { a.op("MOVAPS", ops...) }
func (a *Asm) MOVAPS(ops ...Operand)          { a.op("MOVAPS", ops...) }
func (a *Asm) Movou(ops ...Operand)           { a.op("MOVOU", ops...) }
func (a *Asm) MOVOU(ops ...Operand)           { a.op("MOVOU", ops...) }
func (a *Asm) Movhlps(ops ...Operand)         { a.op("MOVHLPS", ops...) }
func (a *Asm) MOVHLPS(ops ...Operand)         { a.op("MOVHLPS", ops...) }
func (a *Asm) Movhpd(ops ...Operand)          { a.op("MOVHPD", ops...) }
func (a *Asm) MOVHPD(ops ...Operand)          { a.op("MOVHPD", ops...) }
func (a *Asm) Movhps(ops ...Operand)          { a.op("MOVHPS", ops...) }
func (a *Asm) MOVHPS(ops ...Operand)          { a.op("MOVHPS", ops...) }
func (a *Asm) Movlhps(ops ...Operand)         { a.op("MOVLHPS", ops...) }
func (a *Asm) MOVLHPS(ops ...Operand)         { a.op("MOVLHPS", ops...) }
func (a *Asm) Movlpd(ops ...Operand)          { a.op("MOVLPD", ops...) }
func (a *Asm) MOVLPD(ops ...Operand)          { a.op("MOVLPD", ops...) }
func (a *Asm) Movlps(ops ...Operand)          { a.op("MOVLPS", ops...) }
func (a *Asm) MOVLPS(ops ...Operand)          { a.op("MOVLPS", ops...) }
func (a *Asm) Movmskpd(ops ...Operand)        { a.op("MOVMSKPD", ops...) }
func (a *Asm) MOVMSKPD(ops ...Operand)        { a.op("MOVMSKPD", ops...) }
func (a *Asm) Movmskps(ops ...Operand)        { a.op("MOVMSKPS", ops...) }
func (a *Asm) MOVMSKPS(ops ...Operand)        { a.op("MOVMSKPS", ops...) }
func (a *Asm) Movnto(ops ...Operand)          { a.op("MOVNTO", ops...) }
func (a *Asm) MOVNTO(ops ...Operand)          { a.op("MOVNTO", ops...) }
func (a *Asm) Movntpd(ops ...Operand)         { a.op("MOVNTPD", ops...) }
func (a *Asm) MOVNTPD(ops ...Operand)         { a.op("MOVNTPD", ops...) }
func (a *Asm) Movntps(ops ...Operand)         { a.op("MOVNTPS", ops...) }
func (a *Asm) MOVNTPS(ops ...Operand)         { a.op("MOVNTPS", ops...) }
func (a *Asm) Movntq(ops ...Operand)          { a.op("MOVNTQ", ops...) }
func (a *Asm) MOVNTQ(ops ...Operand)          { a.op("MOVNTQ", ops...) }
func (a *Asm) Movo(ops ...Operand)            { a.op("MOVO", ops...) }
func (a *Asm) MOVO(ops ...Operand)            { a.op("MOVO", ops...) }
func (a *Asm) Movqozx(ops ...Operand)         { a.op("MOVQOZX", ops...) }
func (a *Asm) MOVQOZX(ops ...Operand)         { a.op("MOVQOZX", ops...) }
func (a *Asm) Movsd(ops ...Operand)           { a.op("MOVSD", ops...) }
func (a *Asm) MOVSD(ops ...Operand)           { a.op("MOVSD", ops...) }
func (a *Asm) Movss(ops ...Operand)           { a.op("MOVSS", ops...) }
func (a *Asm) MOVSS(ops ...Operand)           { a.op("MOVSS", ops...) }
func (a *Asm) Movupd(ops ...Operand)          { a.op("MOVUPD", ops...) }
func (a *Asm) MOVUPD(ops ...Operand)          { a.op("MOVUPD", ops...) }
func (a *Asm) Movups(ops ...Operand)          { a.op("MOVUPS", ops...) }
func (a *Asm) MOVUPS(ops ...Operand)          { a.op("MOVUPS", ops...) }
func (a *Asm) Mulpd(ops ...Operand)           { a.op("MULPD", ops...) }
func (a *Asm) MULPD(ops ...Operand)           { a.op("MULPD", ops...) }
func (a *Asm) Mulps(ops ...Operand)           { a.op("MULPS", ops...) }
func (a *Asm) MULPS(ops ...Operand)           { a.op("MULPS", ops...) }
func (a *Asm) Mulsd(ops ...Operand)           { a.op("MULSD", ops...) }
func (a *Asm) MULSD(ops ...Operand)           { a.op("MULSD", ops...) }
func (a *Asm) Mulss(ops ...Operand)           { a.op("MULSS", ops...) }
func (a *Asm) MULSS(ops ...Operand)           { a.op("MULSS", ops...) }
func (a *Asm) Mulxl(ops ...Operand)           { a.op("MULXL", ops...) }
func (a *Asm) MULXL(ops ...Operand)           { a.op("MULXL", ops...) }
func (a *Asm) Mulxq(ops ...Operand)           { a.op("MULXQ", ops...) }
func (a *Asm) MULXQ(ops ...Operand)           { a.op("MULXQ", ops...) }
func (a *Asm) Orpd(ops ...Operand)            { a.op("ORPD", ops...) }
func (a *Asm) ORPD(ops ...Operand)            { a.op("ORPD", ops...) }
func (a *Asm) Orps(ops ...Operand)            { a.op("ORPS", ops...) }
func (a *Asm) ORPS(ops ...Operand)            { a.op("ORPS", ops...) }
func (a *Asm) Packsslw(ops ...Operand)        { a.op("PACKSSLW", ops...) }
func (a *Asm) PACKSSLW(ops ...Operand)        { a.op("PACKSSLW", ops...) }
func (a *Asm) Packsswb(ops ...Operand)        { a.op("PACKSSWB", ops...) }
func (a *Asm) PACKSSWB(ops ...Operand)        { a.op("PACKSSWB", ops...) }
func (a *Asm) Packuswb(ops ...Operand)        { a.op("PACKUSWB", ops...) }
func (a *Asm) PACKUSWB(ops ...Operand)        { a.op("PACKUSWB", ops...) }
func (a *Asm) Paddb(ops ...Operand)           { a.op("PADDB", ops...) }
func (a *Asm) PADDB(ops ...Operand)           { a.op("PADDB", ops...) }
func (a *Asm) Paddl(ops ...Operand)           { a.op("PADDL", ops...) }
func (a *Asm) PADDL(ops ...Operand)           { a.op("PADDL", ops...) }
func (a *Asm) Paddq(ops ...Operand)           { a.op("PADDQ", ops...) }
func (a *Asm) PADDQ(ops ...Operand)           { a.op("PADDQ", ops...) }
func (a *Asm) Paddsb(ops ...Operand)          { a.op("PADDSB", ops...) }
func (a *Asm) PADDSB(ops ...Operand)          { a.op("PADDSB", ops...) }
func (a *Asm) Paddsw(ops ...Operand)          { a.op("PADDSW", ops...) }
func (a *Asm) PADDSW(ops ...Operand)          { a.op("PADDSW", ops...) }
func (a *Asm) Paddusb(ops ...Operand)         { a.op("PADDUSB", ops...) }
func (a *Asm) PADDUSB(ops ...Operand)         { a.op("PADDUSB", ops...) }
func (a *Asm) Paddusw(ops ...Operand)         { a.op("PADDUSW", ops...) }
func (a *Asm) PADDUSW(ops ...Operand)         { a.op("PADDUSW", ops...) }
func (a *Asm) Paddw(ops ...Operand)           { a.op("PADDW", ops...) }
func (a *Asm) PADDW(ops ...Operand)           { a.op("PADDW", ops...) }
func (a *Asm) Pand(ops ...Operand)            { a.op("PAND", ops...) }
func (a *Asm) PAND(ops ...Operand)            { a.op("PAND", ops...) }
func (a *Asm) Pandb(ops ...Operand)           { a.op("PANDB", ops...) }
func (a *Asm) PANDB(ops ...Operand)           { a.op("PANDB", ops...) }
func (a *Asm) Pandl(ops ...Operand)           { a.op("PANDL", ops...) }
func (a *Asm) PANDL(ops ...Operand)           { a.op("PANDL", ops...) }
func (a *Asm) Pandn(ops ...Operand)           { a.op("PANDN", ops...) }
func (a *Asm) PANDN(ops ...Operand)           { a.op("PANDN", ops...) }
func (a *Asm) Pandsb(ops ...Operand)          { a.op("PANDSB", ops...) }
func (a *Asm) PANDSB(ops ...Operand)          { a.op("PANDSB", ops...) }
func (a *Asm) Pandsw(ops ...Operand)          { a.op("PANDSW", ops...) }
func (a *Asm) PANDSW(ops ...Operand)          { a.op("PANDSW", ops...) }
func (a *Asm) Pandusb(ops ...Operand)         { a.op("PANDUSB", ops...) }
func (a *Asm) PANDUSB(ops ...Operand)         { a.op("PANDUSB", ops...) }
func (a *Asm) Pandusw(ops ...Operand)         { a.op("PANDUSW", ops...) }
func (a *Asm) PANDUSW(ops ...Operand)         { a.op("PANDUSW", ops...) }
func (a *Asm) Pandw(ops ...Operand)           { a.op("PANDW", ops...) }
func (a *Asm) PANDW(ops ...Operand)           { a.op("PANDW", ops...) }
func (a *Asm) Pavgb(ops ...Operand)           { a.op("PAVGB", ops...) }
func (a *Asm) PAVGB(ops ...Operand)           { a.op("PAVGB", ops...) }
func (a *Asm) Pavgw(ops ...Operand)           { a.op("PAVGW", ops...) }
func (a *Asm) PAVGW(ops ...Operand)           { a.op("PAVGW", ops...) }
func (a *Asm) Pcmpeqb(ops ...Operand)         { a.op("PCMPEQB", ops...) }
func (a *Asm) PCMPEQB(ops ...Operand)         { a.op("PCMPEQB", ops...) }
func (a *Asm) Pcmpeql(ops ...Operand)         { a.op("PCMPEQL", ops...) }
func (a *Asm) PCMPEQL(ops ...Operand)         { a.op("PCMPEQL", ops...) }
func (a *Asm) Pcmpeqw(ops ...Operand)         { a.op("PCMPEQW", ops...) }
func (a *Asm) PCMPEQW(ops ...Operand)         { a.op("PCMPEQW", ops...) }
func (a *Asm) Pcmpgtb(ops ...Operand)         { a.op("PCMPGTB", ops...) }
func (a *Asm) PCMPGTB(ops ...Operand)         { a.op("PCMPGTB", ops...) }
func (a *Asm) Pcmpgtl(ops ...Operand)         { a.op("PCMPGTL", ops...) }
func (a *Asm) PCMPGTL(ops ...Operand)         { a.op("PCMPGTL", ops...) }
func (a *Asm) Pcmpgtw(ops ...Operand)         { a.op("PCMPGTW", ops...) }
func (a *Asm) PCMPGTW(ops ...Operand)         { a.op("PCMPGTW", ops...) }
func (a *Asm) Pdepl(ops ...Operand)           { a.op("PDEPL", ops...) }
func (a *Asm) PDEPL(ops ...Operand)           { a.op("PDEPL", ops...) }
func (a *Asm) Pdepq(ops ...Operand)           { a.op("PDEPQ", ops...) }
func (a *Asm) PDEPQ(ops ...Operand)           { a.op("PDEPQ", ops...) }
func (a *Asm) Pextl(ops ...Operand)           { a.op("PEXTL", ops...) }
func (a *Asm) PEXTL(ops ...Operand)           { a.op("PEXTL", ops...) }
func (a *Asm) Pextq(ops ...Operand)           { a.op("PEXTQ", ops...) }
func (a *Asm) PEXTQ(ops ...Operand)           { a.op("PEXTQ", ops...) }
func (a *Asm) Pextrb(ops ...Operand)          { a.op("PEXTRB", ops...) }
func (a *Asm) PEXTRB(ops ...Operand)          { a.op("PEXTRB", ops...) }
func (a *Asm) Pextrd(ops ...Operand)          { a.op("PEXTRD", ops...) }
func (a *Asm) PEXTRD(ops ...Operand)          { a.op("PEXTRD", ops...) }
func (a *Asm) Pextrq(ops ...Operand)          { a.op("PEXTRQ", ops...) }
func (a *Asm) PEXTRQ(ops ...Operand)          { a.op("PEXTRQ", ops...) }
func (a *Asm) Pfacc(ops ...Operand)           { a.op("PFACC", ops...) }
func (a *Asm) PFACC(ops ...Operand)           { a.op("PFACC", ops...) }
func (a *Asm) Pfadd(ops ...Operand)           { a.op("PFADD", ops...) }
func (a *Asm) PFADD(ops ...Operand)           { a.op("PFADD", ops...) }
func (a *Asm) Pfcmpeq(ops ...Operand)         { a.op("PFCMPEQ", ops...) }
func (a *Asm) PFCMPEQ(ops ...Operand)         { a.op("PFCMPEQ", ops...) }
func (a *Asm) Pfcmpge(ops ...Operand)         { a.op("PFCMPGE", ops...) }
func (a *Asm) PFCMPGE(ops ...Operand)         { a.op("PFCMPGE", ops...) }
func (a *Asm) Pfcmpgt(ops ...Operand)         { a.op("PFCMPGT", ops...) }
func (a *Asm) PFCMPGT(ops ...Operand)         { a.op("PFCMPGT", ops...) }
func (a *Asm) Pfmax(ops ...Operand)           { a.op("PFMAX", ops...) }
func (a *Asm) PFMAX(ops ...Operand)           { a.op("PFMAX", ops...) }
func (a *Asm) Pfmin(ops ...Operand)           { a.op("PFMIN", ops...) }
func (a *Asm) PFMIN(ops ...Operand)           { a.op("PFMIN", ops...) }
func (a *Asm) Pfmul(ops ...Operand)           { a.op("PFMUL", ops...) }
func (a *Asm) PFMUL(ops ...Operand)           { a.op("PFMUL", ops...) }
func (a *Asm) Pfnacc(ops ...Operand)          { a.op("PFNACC", ops...) }
func (a *Asm) PFNACC(ops ...Operand)          { a.op("PFNACC", ops...) }
func (a *Asm) Pfpnacc(ops ...Operand)         { a.op("PFPNACC", ops...) }
func (a *Asm) PFPNACC(ops ...Operand)         { a.op("PFPNACC", ops...) }
func (a *Asm) Pfrcp(ops ...Operand)           { a.op("PFRCP", ops...) }
func (a *Asm) PFRCP(ops ...Operand)           { a.op("PFRCP", ops...) }
func (a *Asm) Pfrcpi2t(ops ...Operand)        { a.op("PFRCPI2T", ops...) }
func (a *Asm) PFRCPI2T(ops ...Operand)        { a.op("PFRCPI2T", ops...) }
func (a *Asm) Pfrcpit1(ops ...Operand)        { a.op("PFRCPIT1", ops...) }
func (a *Asm) PFRCPIT1(ops ...Operand)        { a.op("PFRCPIT1", ops...) }
func (a *Asm) Pfrsqit1(ops ...Operand)        { a.op("PFRSQIT1", ops...) }
func (a *Asm) PFRSQIT1(ops ...Operand)        { a.op("PFRSQIT1", ops...) }
func (a *Asm) Pfrsqrt(ops ...Operand)         { a.op("PFRSQRT", ops...) }
func (a *Asm) PFRSQRT(ops ...Operand)         { a.op("PFRSQRT", ops...) }
func (a *Asm) Pfsub(ops ...Operand)           { a.op("PFSUB", ops...) }
func (a *Asm) PFSUB(ops ...Operand)           { a.op("PFSUB", ops...) }
func (a *Asm) Pfsubr(ops ...Operand)          { a.op("PFSUBR", ops...) }
func (a *Asm) PFSUBR(ops ...Operand)          { a.op("PFSUBR", ops...) }
func (a *Asm) Phaddd(ops ...Operand)          { a.op("PHADDD", ops...) }
func (a *Asm) PHADDD(ops ...Operand)          { a.op("PHADDD", ops...) }
func (a *Asm) Phaddsw(ops ...Operand)         { a.op("PHADDSW", ops...) }
func (a *Asm) PHADDSW(ops ...Operand)         { a.op("PHADDSW", ops...) }
func (a *Asm) Phaddw(ops ...Operand)          { a.op("PHADDW", ops...) }
func (a *Asm) PHADDW(ops ...Operand)          { a.op("PHADDW", ops...) }
func (a *Asm) Phminposuw(ops ...Operand)      { a.op("PHMINPOSUW", ops...) }
func (a *Asm) PHMINPOSUW(ops ...Operand)      { a.op("PHMINPOSUW", ops...) }
func (a *Asm) Phsubd(ops ...Operand)          { a.op("PHSUBD", ops...) }
func (a *Asm) PHSUBD(ops ...Operand)          { a.op("PHSUBD", ops...) }
func (a *Asm) Phsubsw(ops ...Operand)         { a.op("PHSUBSW", ops...) }
func (a *Asm) PHSUBSW(ops ...Operand)         { a.op("PHSUBSW", ops...) }
func (a *Asm) Phsubw(ops ...Operand)          { a.op("PHSUBW", ops...) }
func (a *Asm) PHSUBW(ops ...Operand)          { a.op("PHSUBW", ops...) }
func (a *Asm) Pinsrb(ops ...Operand)          { a.op("PINSRB", ops...) }
func (a *Asm) PINSRB(ops ...Operand)          { a.op("PINSRB", ops...) }
func (a *Asm) Pinsrd(ops ...Operand)          { a.op("PINSRD", ops...) }
func (a *Asm) PINSRD(ops ...Operand)          { a.op("PINSRD", ops...) }
func (a *Asm) Pinsrq(ops ...Operand)          { a.op("PINSRQ", ops...) }
func (a *Asm) PINSRQ(ops ...Operand)          { a.op("PINSRQ", ops...) }
func (a *Asm) Pinsrw(ops ...Operand)          { a.op("PINSRW", ops...) }
func (a *Asm) PINSRW(ops ...Operand)          { a.op("PINSRW", ops...) }
func (a *Asm) Pmaddwl(ops ...Operand)         { a.op("PMADDWL", ops...) }
func (a *Asm) PMADDWL(ops ...Operand)         { a.op("PMADDWL", ops...) }
func (a *Asm) Pmaxsw(ops ...Operand)          { a.op("PMAXSW", ops...) }
func (a *Asm) PMAXSW(ops ...Operand)          { a.op("PMAXSW", ops...) }
func (a *Asm) Pmaxub(ops ...Operand)          { a.op("PMAXUB", ops...) }
func (a *Asm) PMAXUB(ops ...Operand)          { a.op("PMAXUB", ops...) }
func (a *Asm) Pminsw(ops ...Operand)          { a.op("PMINSW", ops...) }
func (a *Asm) PMINSW(ops ...Operand)          { a.op("PMINSW", ops...) }
func (a *Asm) Pminub(ops ...Operand)          { a.op("PMINUB", ops...) }
func (a *Asm) PMINUB(ops ...Operand)          { a.op("PMINUB", ops...) }
func (a *Asm) Pmovmskb(ops ...Operand)        { a.op("PMOVMSKB", ops...) }
func (a *Asm) PMOVMSKB(ops ...Operand)        { a.op("PMOVMSKB", ops...) }
func (a *Asm) Pmovsxbd(ops ...Operand)        { a.op("PMOVSXBD", ops...) }
func (a *Asm) PMOVSXBD(ops ...Operand)        { a.op("PMOVSXBD", ops...) }
func (a *Asm) Pmovsxbq(ops ...Operand)        { a.op("PMOVSXBQ", ops...) }
func (a *Asm) PMOVSXBQ(ops ...Operand)        { a.op("PMOVSXBQ", ops...) }
func (a *Asm) Pmovsxbw(ops ...Operand)        { a.op("PMOVSXBW", ops...) }
func (a *Asm) PMOVSXBW(ops ...Operand)        { a.op("PMOVSXBW", ops...) }
func (a *Asm) Pmovsxdq(ops ...Operand)        { a.op("PMOVSXDQ", ops...) }
func (a *Asm) PMOVSXDQ(ops ...Operand)        { a.op("PMOVSXDQ", ops...) }
func (a *Asm) Pmovsxwd(ops ...Operand)        { a.op("PMOVSXWD", ops...) }
func (a *Asm) PMOVSXWD(ops ...Operand)        { a.op("PMOVSXWD", ops...) }
func (a *Asm) Pmovsxwq(ops ...Operand)        { a.op("PMOVSXWQ", ops...) }
func (a *Asm) PMOVSXWQ(ops ...Operand)        { a.op("PMOVSXWQ", ops...) }
func (a *Asm) Pmovzxbd(ops ...Operand)        { a.op("PMOVZXBD", ops...) }
func (a *Asm) PMOVZXBD(ops ...Operand)        { a.op("PMOVZXBD", ops...) }
func (a *Asm) Pmovzxbq(ops ...Operand)        { a.op("PMOVZXBQ", ops...) }
func (a *Asm) PMOVZXBQ(ops ...Operand)        { a.op("PMOVZXBQ", ops...) }
func (a *Asm) Pmovzxbw(ops ...Operand)        { a.op("PMOVZXBW", ops...) }
func (a *Asm) PMOVZXBW(ops ...Operand)        { a.op("PMOVZXBW", ops...) }
func (a *Asm) Pmovzxdq(ops ...Operand)        { a.op("PMOVZXDQ", ops...) }
func (a *Asm) PMOVZXDQ(ops ...Operand)        { a.op("PMOVZXDQ", ops...) }
func (a *Asm) Pmovzxwd(ops ...Operand)        { a.op("PMOVZXWD", ops...) }
func (a *Asm) PMOVZXWD(ops ...Operand)        { a.op("PMOVZXWD", ops...) }
func (a *Asm) Pmovzxwq(ops ...Operand)        { a.op("PMOVZXWQ", ops...) }
func (a *Asm) PMOVZXWQ(ops ...Operand)        { a.op("PMOVZXWQ", ops...) }
func (a *Asm) Pmuldq(ops ...Operand)          { a.op("PMULDQ", ops...) }
func (a *Asm) PMULDQ(ops ...Operand)          { a.op("PMULDQ", ops...) }
func (a *Asm) Pmulhrw(ops ...Operand)         { a.op("PMULHRW", ops...) }
func (a *Asm) PMULHRW(ops ...Operand)         { a.op("PMULHRW", ops...) }
func (a *Asm) Pmulhuw(ops ...Operand)         { a.op("PMULHUW", ops...) }
func (a *Asm) PMULHUW(ops ...Operand)         { a.op("PMULHUW", ops...) }
func (a *Asm) Pmulhw(ops ...Operand)          { a.op("PMULHW", ops...) }
func (a *Asm) PMULHW(ops ...Operand)          { a.op("PMULHW", ops...) }
func (a *Asm) Pmulld(ops ...Operand)          { a.op("PMULLD", ops...) }
func (a *Asm) PMULLD(ops ...Operand)          { a.op("PMULLD", ops...) }
func (a *Asm) Pmullw(ops ...Operand)          { a.op("PMULLW", ops...) }
func (a *Asm) PMULLW(ops ...Operand)          { a.op("PMULLW", ops...) }
func (a *Asm) Pmululq(ops ...Operand)         { a.op("PMULULQ", ops...) }
func (a *Asm) PMULULQ(ops ...Operand)         { a.op("PMULULQ", ops...) }
func (a *Asm) Por(ops ...Operand)             { a.op("POR", ops...) }
func (a *Asm) POR(ops ...Operand)             { a.op("POR", ops...) }
func (a *Asm) Psadbw(ops ...Operand)          { a.op("PSADBW", ops...) }
func (a *Asm) PSADBW(ops ...Operand)          { a.op("PSADBW", ops...) }
func (a *Asm) Pshufb(ops ...Operand)          { a.op("PSHUFB", ops...) }
func (a *Asm) PSHUFB(ops ...Operand)          { a.op("PSHUFB", ops...) }
func (a *Asm) Pshufhw(ops ...Operand)         { a.op("PSHUFHW", ops...) }
func (a *Asm) PSHUFHW(ops ...Operand)         { a.op("PSHUFHW", ops...) }
func (a *Asm) Pshufl(ops ...Operand)          { a.op("PSHUFL", ops...) }
func (a *Asm) PSHUFL(ops ...Operand)          { a.op("PSHUFL", ops...) }
func (a *Asm) Pshuflw(ops ...Operand)         { a.op("PSHUFLW", ops...) }
func (a *Asm) PSHUFLW(ops ...Operand)         { a.op("PSHUFLW", ops...) }
func (a *Asm) Pshufw(ops ...Operand)          { a.op("PSHUFW", ops...) }
func (a *Asm) PSHUFW(ops ...Operand)          { a.op("PSHUFW", ops...) }
func (a *Asm) Pslll(ops ...Operand)           { a.op("PSLLL", ops...) }
func (a *Asm) PSLLL(ops ...Operand)           { a.op("PSLLL", ops...) }
func (a *Asm) Psllo(ops ...Operand)           { a.op("PSLLO", ops...) }
func (a *Asm) PSLLO(ops ...Operand)           { a.op("PSLLO", ops...) }
func (a *Asm) Psllq(ops ...Operand)           { a.op("PSLLQ", ops...) }
func (a *Asm) PSLLQ(ops ...Operand)           { a.op("PSLLQ", ops...) }
func (a *Asm) Psllw(ops ...Operand)           { a.op("PSLLW", ops...) }
func (a *Asm) PSLLW(ops ...Operand)           { a.op("PSLLW", ops...) }
func (a *Asm) Psral(ops ...Operand)           { a.op("PSRAL", ops...) }
func (a *Asm) PSRAL(ops ...Operand)           { a.op("PSRAL", ops...) }
func (a *Asm) Psraw(ops ...Operand)           { a.op("PSRAW", ops...) }
func (a *Asm) PSRAW(ops ...Operand)           { a.op("PSRAW", ops...) }
func (a *Asm) Psrll(ops ...Operand)           { a.op("PSRLL", ops...) }
func (a *Asm) PSRLL(ops ...Operand)           { a.op("PSRLL", ops...) }
func (a *Asm) Psrlo(ops ...Operand)           { a.op("PSRLO", ops...) }
func (a *Asm) PSRLO(ops ...Operand)           { a.op("PSRLO", ops...) }
func (a *Asm) Psrlq(ops ...Operand)           { a.op("PSRLQ", ops...) }
func (a *Asm) PSRLQ(ops ...Operand)           { a.op("PSRLQ", ops...) }
func (a *Asm) Psrlw(ops ...Operand)           { a.op("PSRLW", ops...) }
func (a *Asm) PSRLW(ops ...Operand)           { a.op("PSRLW", ops...) }
func (a *Asm) Psubb(ops ...Operand)           { a.op("PSUBB", ops...) }
func (a *Asm) PSUBB(ops ...Operand)           { a.op("PSUBB", ops...) }
func (a *Asm) Psubl(ops ...Operand)           { a.op("PSUBL", ops...) }
func (a *Asm) PSUBL(ops ...Operand)           { a.op("PSUBL", ops...) }
func (a *Asm) Psubq(ops ...Operand)           { a.op("PSUBQ", ops...) }
func (a *Asm) PSUBQ(ops ...Operand)           { a.op("PSUBQ", ops...) }
func (a *Asm) Psubsb(ops ...Operand)          { a.op("PSUBSB", ops...) }
func (a *Asm) PSUBSB(ops ...Operand)          { a.op("PSUBSB", ops...) }
func (a *Asm) Psubsw(ops ...Operand)          { a.op("PSUBSW", ops...) }
func (a *Asm) PSUBSW(ops ...Operand)          { a.op("PSUBSW", ops...) }
func (a *Asm) Psubusb(ops ...Operand)         { a.op("PSUBUSB", ops...) }
func (a *Asm) PSUBUSB(ops ...Operand)         { a.op("PSUBUSB", ops...) }
func (a *Asm) Psubusw(ops ...Operand)         { a.op("PSUBUSW", ops...) }
func (a *Asm) PSUBUSW(ops ...Operand)         { a.op("PSUBUSW", ops...) }
func (a *Asm) Psubw(ops ...Operand)           { a.op("PSUBW", ops...) }
func (a *Asm) PSUBW(ops ...Operand)           { a.op("PSUBW", ops...) }
func (a *Asm) Pswapl(ops ...Operand)          { a.op("PSWAPL", ops...) }
func (a *Asm) PSWAPL(ops ...Operand)          { a.op("PSWAPL", ops...) }
func (a *Asm) Punpckhbw(ops ...Operand)       { a.op("PUNPCKHBW", ops...) }
func (a *Asm) PUNPCKHBW(ops ...Operand)       { a.op("PUNPCKHBW", ops...) }
func (a *Asm) Punpckhlq(ops ...Operand)       { a.op("PUNPCKHLQ", ops...) }
func (a *Asm) PUNPCKHLQ(ops ...Operand)       { a.op("PUNPCKHLQ", ops...) }
func (a *Asm) Punpckhqdq(ops ...Operand)      { a.op("PUNPCKHQDQ", ops...) }
func (a *Asm) PUNPCKHQDQ(ops ...Operand)      { a.op("PUNPCKHQDQ", ops...) }
func (a *Asm) Punpckhwl(ops ...Operand)       { a.op("PUNPCKHWL", ops...) }
func (a *Asm) PUNPCKHWL(ops ...Operand)       { a.op("PUNPCKHWL", ops...) }
func (a *Asm) Punpcklbw(ops ...Operand)       { a.op("PUNPCKLBW", ops...) }
func (a *Asm) PUNPCKLBW(ops ...Operand)       { a.op("PUNPCKLBW", ops...) }
func (a *Asm) Punpckllq(ops ...Operand)       { a.op("PUNPCKLLQ", ops...) }
func (a *Asm) PUNPCKLLQ(ops ...Operand)       { a.op("PUNPCKLLQ", ops...) }
func (a *Asm) Punpcklqdq(ops ...Operand)      { a.op("PUNPCKLQDQ", ops...) }
func (a *Asm) PUNPCKLQDQ(ops ...Operand)      { a.op("PUNPCKLQDQ", ops...) }
func (a *Asm) Punpcklwl(ops ...Operand)       { a.op("PUNPCKLWL", ops...) }
func (a *Asm) PUNPCKLWL(ops ...Operand)       { a.op("PUNPCKLWL", ops...) }
func (a *Asm) Pxor(ops ...Operand)            { a.op("PXOR", ops...) }
func (a *Asm) PXOR(ops ...Operand)            { a.op("PXOR", ops...) }
func (a *Asm) Rcpps(ops ...Operand)           { a.op("RCPPS", ops...) }
func (a *Asm) RCPPS(ops ...Operand)           { a.op("RCPPS", ops...) }
func (a *Asm) Rcpss(ops ...Operand)           { a.op("RCPSS", ops...) }
func (a *Asm) RCPSS(ops ...Operand)           { a.op("RCPSS", ops...) }
func (a *Asm) Rsqrtps(ops ...Operand)         { a.op("RSQRTPS", ops...) }
func (a *Asm) RSQRTPS(ops ...Operand)         { a.op("RSQRTPS", ops...) }
func (a *Asm) Rsqrtss(ops ...Operand)         { a.op("RSQRTSS", ops...) }
func (a *Asm) RSQRTSS(ops ...Operand)         { a.op("RSQRTSS", ops...) }
func (a *Asm) Sarxl(ops ...Operand)           { a.op("SARXL", ops...) }
func (a *Asm) SARXL(ops ...Operand)           { a.op("SARXL", ops...) }
func (a *Asm) Sarxq(ops ...Operand)           { a.op("SARXQ", ops...) }
func (a *Asm) SARXQ(ops ...Operand)           { a.op("SARXQ", ops...) }
func (a *Asm) Shlxl(ops ...Operand)           { a.op("SHLXL", ops...) }
func (a *Asm) SHLXL(ops ...Operand)           { a.op("SHLXL", ops...) }
func (a *Asm) Shlxq(ops ...Operand)           { a.op("SHLXQ", ops...) }
func (a *Asm) SHLXQ(ops ...Operand)           { a.op("SHLXQ", ops...) }
func (a *Asm) Shrxl(ops ...Operand)           { a.op("SHRXL", ops...) }
func (a *Asm) SHRXL(ops ...Operand)           { a.op("SHRXL", ops...) }
func (a *Asm) Shrxq(ops ...Operand)           { a.op("SHRXQ", ops...) }
func (a *Asm) SHRXQ(ops ...Operand)           { a.op("SHRXQ", ops...) }
func (a *Asm) Shufpd(ops ...Operand)          { a.op("SHUFPD", ops...) }
func (a *Asm) SHUFPD(ops ...Operand)          { a.op("SHUFPD", ops...) }
func (a *Asm) Shufps(ops ...Operand)          { a.op("SHUFPS", ops...) }
func (a *Asm) SHUFPS(ops ...Operand)          { a.op("SHUFPS", ops...) }
func (a *Asm) Sqrtpd(ops ...Operand)          { a.op("SQRTPD", ops...) }
func (a *Asm) SQRTPD(ops ...Operand)          { a.op("SQRTPD", ops...) }
func (a *Asm) Sqrtps(ops ...Operand)          { a.op("SQRTPS", ops...) }
func (a *Asm) SQRTPS(ops ...Operand)          { a.op("SQRTPS", ops...) }
func (a *Asm) Sqrtsd(ops ...Operand)          { a.op("SQRTSD", ops...) }
func (a *Asm) SQRTSD(ops ...Operand)          { a.op("SQRTSD", ops...) }
func (a *Asm) Sqrtss(ops ...Operand)          { a.op("SQRTSS", ops...) }
func (a *Asm) SQRTSS(ops ...Operand)          { a.op("SQRTSS", ops...) }
func (a *Asm) Stmxcsr(ops ...Operand)         { a.op("STMXCSR", ops...) }
func (a *Asm) STMXCSR(ops ...Operand)         { a.op("STMXCSR", ops...) }
func (a *Asm) Subpd(ops ...Operand)           { a.op("SUBPD", ops...) }
func (a *Asm) SUBPD(ops ...Operand)           { a.op("SUBPD", ops...) }
func (a *Asm) Subps(ops ...Operand)           { a.op("SUBPS", ops...) }
func (a *Asm) SUBPS(ops ...Operand)           { a.op("SUBPS", ops...) }
func (a *Asm) Subsd(ops ...Operand)           { a.op("SUBSD", ops...) }
func (a *Asm) SUBSD(ops ...Operand)           { a.op("SUBSD", ops...) }
func (a *Asm) Subss(ops ...Operand)           { a.op("SUBSS", ops...) }
func (a *Asm) SUBSS(ops ...Operand)           { a.op("SUBSS", ops...) }
func (a *Asm) Ucomisd(ops ...Operand)         { a.op("UCOMISD", ops...) }
func (a *Asm) UCOMISD(ops ...Operand)         { a.op("UCOMISD", ops...) }
func (a *Asm) Ucomiss(ops ...Operand)         { a.op("UCOMISS", ops...) }
func (a *Asm) UCOMISS(ops ...Operand)         { a.op("UCOMISS", ops...) }
func (a *Asm) Unpckhpd(ops ...Operand)        { a.op("UNPCKHPD", ops...) }
func (a *Asm) UNPCKHPD(ops ...Operand)        { a.op("UNPCKHPD", ops...) }
func (a *Asm) Unpckhps(ops ...Operand)        { a.op("UNPCKHPS", ops...) }
func (a *Asm) UNPCKHPS(ops ...Operand)        { a.op("UNPCKHPS", ops...) }
func (a *Asm) Unpcklpd(ops ...Operand)        { a.op("UNPCKLPD", ops...) }
func (a *Asm) UNPCKLPD(ops ...Operand)        { a.op("UNPCKLPD", ops...) }
func (a *Asm) Unpcklps(ops ...Operand)        { a.op("UNPCKLPS", ops...) }
func (a *Asm) UNPCKLPS(ops ...Operand)        { a.op("UNPCKLPS", ops...) }
func (a *Asm) Xorpd(ops ...Operand)           { a.op("XORPD", ops...) }
func (a *Asm) XORPD(ops ...Operand)           { a.op("XORPD", ops...) }
func (a *Asm) Xorps(ops ...Operand)           { a.op("XORPS", ops...) }
func (a *Asm) XORPS(ops ...Operand)           { a.op("XORPS", ops...) }
func (a *Asm) Pf2iw(ops ...Operand)           { a.op("PF2IW", ops...) }
func (a *Asm) PF2IW(ops ...Operand)           { a.op("PF2IW", ops...) }
func (a *Asm) Pf2il(ops ...Operand)           { a.op("PF2IL", ops...) }
func (a *Asm) PF2IL(ops ...Operand)           { a.op("PF2IL", ops...) }
func (a *Asm) Pi2fw(ops ...Operand)           { a.op("PI2FW", ops...) }
func (a *Asm) PI2FW(ops ...Operand)           { a.op("PI2FW", ops...) }
func (a *Asm) Pi2fl(ops ...Operand)           { a.op("PI2FL", ops...) }
func (a *Asm) PI2FL(ops ...Operand)           { a.op("PI2FL", ops...) }
func (a *Asm) Retfw(ops ...Operand)           { a.op("RETFW", ops...) }
func (a *Asm) RETFW(ops ...Operand)           { a.op("RETFW", ops...) }
func (a *Asm) Retfl(ops ...Operand)           { a.op("RETFL", ops...) }
func (a *Asm) RETFL(ops ...Operand)           { a.op("RETFL", ops...) }
func (a *Asm) Retfq(ops ...Operand)           { a.op("RETFQ", ops...) }
func (a *Asm) RETFQ(ops ...Operand)           { a.op("RETFQ", ops...) }
func (a *Asm) Swapgs(ops ...Operand)          { a.op("SWAPGS", ops...) }
func (a *Asm) SWAPGS(ops ...Operand)          { a.op("SWAPGS", ops...) }
func (a *Asm) Mode(ops ...Operand)            { a.op("MODE", ops...) }
func (a *Asm) MODE(ops ...Operand)            { a.op("MODE", ops...) }
func (a *Asm) Crc32b(ops ...Operand)          { a.op("CRC32B", ops...) }
func (a *Asm) CRC32B(ops ...Operand)          { a.op("CRC32B", ops...) }
func (a *Asm) Crc32q(ops ...Operand)          { a.op("CRC32Q", ops...) }
func (a *Asm) CRC32Q(ops ...Operand)          { a.op("CRC32Q", ops...) }
func (a *Asm) Imul3q(ops ...Operand)          { a.op("IMUL3Q", ops...) }
func (a *Asm) IMUL3Q(ops ...Operand)          { a.op("IMUL3Q", ops...) }
func (a *Asm) Prefetcht0(ops ...Operand)      { a.op("PREFETCHT0", ops...) }
func (a *Asm) PREFETCHT0(ops ...Operand)      { a.op("PREFETCHT0", ops...) }
func (a *Asm) Prefetcht1(ops ...Operand)      { a.op("PREFETCHT1", ops...) }
func (a *Asm) PREFETCHT1(ops ...Operand)      { a.op("PREFETCHT1", ops...) }
func (a *Asm) Prefetcht2(ops ...Operand)      { a.op("PREFETCHT2", ops...) }
func (a *Asm) PREFETCHT2(ops ...Operand)      { a.op("PREFETCHT2", ops...) }
func (a *Asm) Prefetchnta(ops ...Operand)     { a.op("PREFETCHNTA", ops...) }
func (a *Asm) PREFETCHNTA(ops ...Operand)     { a.op("PREFETCHNTA", ops...) }
func (a *Asm) Movql(ops ...Operand)           { a.op("MOVQL", ops...) }
func (a *Asm) MOVQL(ops ...Operand)           { a.op("MOVQL", ops...) }
func (a *Asm) Bswapl(ops ...Operand)          { a.op("BSWAPL", ops...) }
func (a *Asm) BSWAPL(ops ...Operand)          { a.op("BSWAPL", ops...) }
func (a *Asm) Bswapq(ops ...Operand)          { a.op("BSWAPQ", ops...) }
func (a *Asm) BSWAPQ(ops ...Operand)          { a.op("BSWAPQ", ops...) }
func (a *Asm) Aesenc(ops ...Operand)          { a.op("AESENC", ops...) }
func (a *Asm) AESENC(ops ...Operand)          { a.op("AESENC", ops...) }
func (a *Asm) Aesenclast(ops ...Operand)      { a.op("AESENCLAST", ops...) }
func (a *Asm) AESENCLAST(ops ...Operand)      { a.op("AESENCLAST", ops...) }
func (a *Asm) Aesdec(ops ...Operand)          { a.op("AESDEC", ops...) }
func (a *Asm) AESDEC(ops ...Operand)          { a.op("AESDEC", ops...) }
func (a *Asm) Aesdeclast(ops ...Operand)      { a.op("AESDECLAST", ops...) }
func (a *Asm) AESDECLAST(ops ...Operand)      { a.op("AESDECLAST", ops...) }
func (a *Asm) Aesimc(ops ...Operand)          { a.op("AESIMC", ops...) }
func (a *Asm) AESIMC(ops ...Operand)          { a.op("AESIMC", ops...) }
func (a *Asm) Aeskeygenassist(ops ...Operand) { a.op("AESKEYGENASSIST", ops...) }
func (a *Asm) AESKEYGENASSIST(ops ...Operand) { a.op("AESKEYGENASSIST", ops...) }
func (a *Asm) Roundps(ops ...Operand)         { a.op("ROUNDPS", ops...) }
func (a *Asm) ROUNDPS(ops ...Operand)         { a.op("ROUNDPS", ops...) }
func (a *Asm) Roundss(ops ...Operand)         { a.op("ROUNDSS", ops...) }
func (a *Asm) ROUNDSS(ops ...Operand)         { a.op("ROUNDSS", ops...) }
func (a *Asm) Roundpd(ops ...Operand)         { a.op("ROUNDPD", ops...) }
func (a *Asm) ROUNDPD(ops ...Operand)         { a.op("ROUNDPD", ops...) }
func (a *Asm) Roundsd(ops ...Operand)         { a.op("ROUNDSD", ops...) }
func (a *Asm) ROUNDSD(ops ...Operand)         { a.op("ROUNDSD", ops...) }
func (a *Asm) Pshufd(ops ...Operand)          { a.op("PSHUFD", ops...) }
func (a *Asm) PSHUFD(ops ...Operand)          { a.op("PSHUFD", ops...) }
func (a *Asm) Pclmulqdq(ops ...Operand)       { a.op("PCLMULQDQ", ops...) }
func (a *Asm) PCLMULQDQ(ops ...Operand)       { a.op("PCLMULQDQ", ops...) }
func (a *Asm) Vzeroupper(ops ...Operand)      { a.op("VZEROUPPER", ops...) }
func (a *Asm) VZEROUPPER(ops ...Operand)      { a.op("VZEROUPPER", ops...) }
func (a *Asm) Vmovdqu(ops ...Operand)         { a.op("VMOVDQU", ops...) }
func (a *Asm) VMOVDQU(ops ...Operand)         { a.op("VMOVDQU", ops...) }
func (a *Asm) Vmovntdq(ops ...Operand)        { a.op("VMOVNTDQ", ops...) }
func (a *Asm) VMOVNTDQ(ops ...Operand)        { a.op("VMOVNTDQ", ops...) }
func (a *Asm) Vmovdqa(ops ...Operand)         { a.op("VMOVDQA", ops...) }
func (a *Asm) VMOVDQA(ops ...Operand)         { a.op("VMOVDQA", ops...) }
func (a *Asm) Vpcmpeqb(ops ...Operand)        { a.op("VPCMPEQB", ops...) }
func (a *Asm) VPCMPEQB(ops ...Operand)        { a.op("VPCMPEQB", ops...) }
func (a *Asm) Vpxor(ops ...Operand)           { a.op("VPXOR", ops...) }
func (a *Asm) VPXOR(ops ...Operand)           { a.op("VPXOR", ops...) }
func (a *Asm) Vpmovmskb(ops ...Operand)       { a.op("VPMOVMSKB", ops...) }
func (a *Asm) VPMOVMSKB(ops ...Operand)       { a.op("VPMOVMSKB", ops...) }
func (a *Asm) Vpand(ops ...Operand)           { a.op("VPAND", ops...) }
func (a *Asm) VPAND(ops ...Operand)           { a.op("VPAND", ops...) }
func (a *Asm) Vptest(ops ...Operand)          { a.op("VPTEST", ops...) }
func (a *Asm) VPTEST(ops ...Operand)          { a.op("VPTEST", ops...) }
func (a *Asm) Vpbroadcastb(ops ...Operand)    { a.op("VPBROADCASTB", ops...) }
func (a *Asm) VPBROADCASTB(ops ...Operand)    { a.op("VPBROADCASTB", ops...) }
func (a *Asm) Jcxzw(ops ...Operand)           { a.op("JCXZW", ops...) }
func (a *Asm) JCXZW(ops ...Operand)           { a.op("JCXZW", ops...) }
func (a *Asm) Fcmovcc(ops ...Operand)         { a.op("FCMOVCC", ops...) }
func (a *Asm) FCMOVCC(ops ...Operand)         { a.op("FCMOVCC", ops...) }
func (a *Asm) Fcmovcs(ops ...Operand)         { a.op("FCMOVCS", ops...) }
func (a *Asm) FCMOVCS(ops ...Operand)         { a.op("FCMOVCS", ops...) }
func (a *Asm) Fcmoveq(ops ...Operand)         { a.op("FCMOVEQ", ops...) }
func (a *Asm) FCMOVEQ(ops ...Operand)         { a.op("FCMOVEQ", ops...) }
func (a *Asm) Fcmovhi(ops ...Operand)         { a.op("FCMOVHI", ops...) }
func (a *Asm) FCMOVHI(ops ...Operand)         { a.op("FCMOVHI", ops...) }
func (a *Asm) Fcmovls(ops ...Operand)         { a.op("FCMOVLS", ops...) }
func (a *Asm) FCMOVLS(ops ...Operand)         { a.op("FCMOVLS", ops...) }
func (a *Asm) Fcmovne(ops ...Operand)         { a.op("FCMOVNE", ops...) }
func (a *Asm) FCMOVNE(ops ...Operand)         { a.op("FCMOVNE", ops...) }
func (a *Asm) Fcmovnu(ops ...Operand)         { a.op("FCMOVNU", ops...) }
func (a *Asm) FCMOVNU(ops ...Operand)         { a.op("FCMOVNU", ops...) }
func (a *Asm) Fcmovun(ops ...Operand)         { a.op("FCMOVUN", ops...) }
func (a *Asm) FCMOVUN(ops ...Operand)         { a.op("FCMOVUN", ops...) }
func (a *Asm) Fcomi(ops ...Operand)           { a.op("FCOMI", ops...) }
func (a *Asm) FCOMI(ops ...Operand)           { a.op("FCOMI", ops...) }
func (a *Asm) Fcomip(ops ...Operand)          { a.op("FCOMIP", ops...) }
func (a *Asm) FCOMIP(ops ...Operand)          { a.op("FCOMIP", ops...) }
func (a *Asm) Fucomi(ops ...Operand)          { a.op("FUCOMI", ops...) }
func (a *Asm) FUCOMI(ops ...Operand)          { a.op("FUCOMI", ops...) }
func (a *Asm) Fucomip(ops ...Operand)         { a.op("FUCOMIP", ops...) }
func (a *Asm) FUCOMIP(ops ...Operand)         { a.op("FUCOMIP", ops...) }
func (a *Asm) Xacquire(ops ...Operand)        { a.op("XACQUIRE", ops...) }
func (a *Asm) XACQUIRE(ops ...Operand)        { a.op("XACQUIRE", ops...) }
func (a *Asm) Xrelease(ops ...Operand)        { a.op("XRELEASE", ops...) }
func (a *Asm) XRELEASE(ops ...Operand)        { a.op("XRELEASE", ops...) }
func (a *Asm) Xbegin(ops ...Operand)          { a.op("XBEGIN", ops...) }
func (a *Asm) XBEGIN(ops ...Operand)          { a.op("XBEGIN", ops...) }
func (a *Asm) Xend(ops ...Operand)            { a.op("XEND", ops...) }
func (a *Asm) XEND(ops ...Operand)            { a.op("XEND", ops...) }
func (a *Asm) Xabort(ops ...Operand)          { a.op("XABORT", ops...) }
func (a *Asm) XABORT(ops ...Operand)          { a.op("XABORT", ops...) }
func (a *Asm) Xtest(ops ...Operand)           { a.op("XTEST", ops...) }
func (a *Asm) XTEST(ops ...Operand)           { a.op("XTEST", ops...) }
func (a *Asm) Last(ops ...Operand)            { a.op("LAST", ops...) }
func (a *Asm) LAST(ops ...Operand)            { a.op("LAST", ops...) }
